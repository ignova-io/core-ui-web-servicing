{"version":3,"file":"static/js/8710.337b69a1.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Autocomplete/Autocomplete.js","../node_modules/@mui/material/useAutocomplete/useAutocomplete.js"],"sourcesContent":["'use client';\n\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete/index.js\";\nimport Popper from \"../Popper/index.js\";\nimport ListSubheader from \"../ListSubheader/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport IconButton from \"../IconButton/index.js\";\nimport Chip from \"../Chip/index.js\";\nimport inputClasses from \"../Input/inputClasses.js\";\nimport inputBaseClasses from \"../InputBase/inputBaseClasses.js\";\nimport outlinedInputClasses from \"../OutlinedInput/outlinedInputClasses.js\";\nimport filledInputClasses from \"../FilledInput/filledInputClasses.js\";\nimport ClearIcon from \"../internal/svg-icons/Close.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport autocompleteClasses, { getAutocompleteUtilityClass } from \"./autocompleteClasses.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [`& .${autocompleteClasses.inputRoot}`]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen];\n  }\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n})));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(memoTheme(({\n  theme\n}) => ({\n  ...theme.typography.body1,\n  overflow: 'auto'\n})));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteListbox = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(memoTheme(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n})));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(memoTheme(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n})));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps: ChipPropsProp,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp,\n    isOptionEqualToValue,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent: ListboxComponentProp,\n    ListboxProps: ListboxPropsProp,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent: PaperComponentProp,\n    PopperComponent: PopperComponentProp,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slots = {},\n    slotProps = {},\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    componentName: 'Autocomplete'\n  });\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: listboxRef,\n    ...otherListboxProps\n  } = getListboxProps();\n  const defaultGetOptionLabel = option => option.label ?? option;\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    ...props,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots: {\n      paper: PaperComponentProp,\n      popper: PopperComponentProp,\n      ...slots\n    },\n    slotProps: {\n      chip: ChipPropsProp,\n      listbox: ListboxPropsProp,\n      ...componentsProps,\n      ...slotProps\n    }\n  };\n  const [ListboxSlot, listboxProps] = useSlot('listbox', {\n    elementType: AutocompleteListbox,\n    externalForwardedProps,\n    ownerState,\n    className: classes.listbox,\n    additionalProps: otherListboxProps,\n    ref: listboxRef\n  });\n  const [PaperSlot, paperProps] = useSlot('paper', {\n    elementType: Paper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.paper\n  });\n  const [PopperSlot, popperProps] = useSlot('popper', {\n    elementType: Popper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.popper,\n    additionalProps: {\n      disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      role: 'presentation',\n      anchorEl,\n      open: popupOpen\n    }\n  });\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => ({\n      className: classes.tag,\n      disabled,\n      ...getTagProps(params)\n    });\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => {\n        const {\n          key,\n          ...customTagProps\n        } = getCustomizedTagProps({\n          index\n        });\n        return /*#__PURE__*/_jsx(Chip, {\n          label: getOptionLabel(option),\n          size: size,\n          ...customTagProps,\n          ...externalForwardedProps.slotProps.chip\n        }, key);\n      });\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n      key,\n      ...otherProps\n    } = props2;\n    return /*#__PURE__*/_jsx(\"li\", {\n      ...otherProps,\n      children: getOptionLabel(option)\n    }, key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...optionProps,\n      className: classes.option\n    }, option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;\n  const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;\n  const renderAutocompletePopperChildren = children => /*#__PURE__*/_jsx(AutocompletePopper, {\n    as: PopperSlot,\n    ...popperProps,\n    children: /*#__PURE__*/_jsx(AutocompletePaper, {\n      as: PaperSlot,\n      ...paperProps,\n      children: children\n    })\n  });\n  let autocompletePopper = null;\n  if (groupedOptions.length > 0) {\n    autocompletePopper = renderAutocompletePopperChildren(\n    /*#__PURE__*/\n    // TODO v7: remove `as` prop and move ListboxComponentProp to externalForwardedProps or remove ListboxComponentProp entirely\n    // https://github.com/mui/material-ui/pull/43994#issuecomment-2401945800\n    _jsx(ListboxSlot, {\n      as: ListboxComponentProp,\n      ...listboxProps,\n      children: groupedOptions.map((option, index) => {\n        if (groupBy) {\n          return renderGroup({\n            key: option.key,\n            group: option.group,\n            children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n          });\n        }\n        return renderListOption(option, index);\n      })\n    }));\n  } else if (loading && groupedOptions.length === 0) {\n    autocompletePopper = renderAutocompletePopperChildren(/*#__PURE__*/_jsx(AutocompleteLoading, {\n      className: classes.loading,\n      ownerState: ownerState,\n      children: loadingText\n    }));\n  } else if (groupedOptions.length === 0 && !freeSolo && !loading) {\n    autocompletePopper = renderAutocompletePopperChildren(/*#__PURE__*/_jsx(AutocompleteNoOptions, {\n      className: classes.noOptions,\n      ownerState: ownerState,\n      role: \"presentation\",\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      },\n      children: noOptionsText\n    }));\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...getRootProps(other),\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onMouseDown: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          },\n          ...((hasClearIcon || hasPopupIcon) && {\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n              className: classes.endAdornment,\n              ownerState: ownerState,\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\n                ...getClearProps(),\n                \"aria-label\": clearText,\n                title: clearText,\n                ownerState: ownerState,\n                ...clearIndicatorSlotProps,\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps?.className),\n                children: clearIcon\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\n                ...getPopupIndicatorProps(),\n                disabled: disabled,\n                \"aria-label\": popupOpen ? closeText : openText,\n                title: popupOpen ? closeText : openText,\n                ownerState: ownerState,\n                ...popupIndicatorSlotProps,\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps?.className),\n                children: popupIcon\n              }) : null]\n            })\n          })\n        },\n        inputProps: {\n          className: classes.input,\n          disabled,\n          readOnly,\n          ...getInputProps()\n        }\n      })\n    }), anchorEl ? autocompletePopper : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.\n   * @deprecated Use `slotProps.chip` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} option The Autocomplete option.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`, `\"blur\"`, `\"selectOption\"`, `\"removeOption\"`\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * A list of options that will be shown in the Autocomplete.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   * @deprecated Use `slots.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   * @deprecated Use `slots.popper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    chip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    popper: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","'use client';\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleTagDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;"],"names":["_ClearIcon","_ArrowDropDownIcon","AutocompleteRoot","styled","name","slot","overridesResolver","props","styles","ownerState","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","autocompleteClasses","tag","capitalize","inputRoot","input","root","focused","clearIndicator","visibility","margin","maxWidth","paddingRight","width","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","sizeSmall","outlinedInputClasses","endAdornment","right","paddingTop","paddingLeft","filledInputClasses","hiddenLabel","flexGrow","textOverflow","opacity","variants","style","multiple","flexWrap","AutocompleteEndAdornment","position","top","transform","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","popupIndicator","popupOpen","popupIndicatorOpen","AutocompletePopper","Popper","option","popper","disablePortal","popperDisablePortal","memoTheme","_ref","theme","zIndex","vars","modal","AutocompletePaper","Paper","paper","_ref2","typography","body1","overflow","AutocompleteLoading","loading","_ref3","color","palette","text","secondary","AutocompleteNoOptions","noOptions","_ref4","AutocompleteListbox","listbox","_ref5","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","primary","mainChannel","selectedOpacity","alpha","main","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","ListSubheader","groupLabel","_ref6","background","AutocompleteGroupUl","groupUl","React","inProps","ref","useDefaultProps","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","ChipPropsProp","className","clearIcon","_jsx","ClearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionDisabled","getOptionKey","getOptionLabel","getOptionLabelProp","isOptionEqualToValue","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValue","inputValueProp","limitTags","ListboxComponent","ListboxComponentProp","ListboxProps","ListboxPropsProp","loadingText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PaperComponentProp","PopperComponent","PopperComponentProp","popupIcon","ArrowDropDownIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slots","slotProps","value","valueProp","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","expanded","focusedTag","anchorEl","setAnchorEl","groupedOptions","useAutocomplete","componentName","onMouseDown","handleInputMouseDown","listboxRef","otherListboxProps","label","classes","composeClasses","getAutocompleteUtilityClass","useUtilityClasses","externalForwardedProps","chip","ListboxSlot","listboxProps","useSlot","elementType","additionalProps","PaperSlot","paperProps","PopperSlot","popperProps","clientWidth","role","startAdornment","length","getCustomizedTagProps","params","map","index","key","customTagProps","Chip","Array","isArray","splice","push","children","_jsxs","component","group","defaultRenderOption","props2","otherProps","renderListOption","optionProps","clearIndicatorSlotProps","popupIndicatorSlotProps","renderAutocompletePopperChildren","as","autocompletePopper","option2","index2","event","preventDefault","clsx","undefined","InputLabelProps","InputProps","target","currentTarget","title","inputProps","stripDiacritics","string","normalize","replace","createFilterOptions","config","arguments","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","toLowerCase","filteredOptions","filter","candidate","startsWith","includes","slice","defaultFilterOptions","defaultIsActiveElementInListbox","current","parentElement","contains","document","activeElement","MULTIPLE_DEFAULT_VALUE","unstable_isActiveElementInListbox","unstable_classNamePrefix","disabledProp","openProp","useId","optionLabel","String","ignoreFocus","firstFocus","inputRef","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","useControlled","controlled","default","setInputValueState","state","setFocused","resetInputValue","newValue","reason","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","usePreviousProps","valueChange","listboxAvailable","focusTag","useEventCallback","tagToFocus","querySelector","setHighlightedIndex","removeAttribute","setAttribute","prev","classList","remove","listboxNode","getAttribute","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","hasAttribute","validOptionIndex","getNextIndex","maxIndex","newIndex","Math","abs","indexOf","setSelectionRange","syncHighlightedIndex","previousHighlightedOptionIndex","getPreviousHighlightedOptionIndex","every","val","i","value1","previousHighlightedOption","findIndex","isSameValue","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","origin","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","which","stopPropagation","handleFocus","handleBlur","handleInputChange","handleOptionMouseMove","Number","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","Map","reduce","acc","onClick","htmlFor","onBlur","onFocus","autoCapitalize","spellCheck","tabIndex","type","onDelete","onMouseMove","onTouchStart"],"sourceRoot":""}