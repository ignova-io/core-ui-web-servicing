{"version":3,"file":"static/js/8571.eb50b810.chunk.js","mappings":"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","sources":["auth/components/form-head.jsx","auth/components/form-return-link.jsx","auth/components/sign-up-terms.jsx","auth/utils/error-message.js","auth/view/supabase/supabase-verify-view.jsx","auth/view/supabase/supabase-sign-in-view.jsx","auth/view/supabase/supabase-sign-up-view.jsx","auth/view/supabase/supabase-reset-password-view.jsx","auth/view/supabase/supabase-update-password-view.jsx","pages/auth/supabase/verify.jsx","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestErrors.ts","../node_modules/@hookform/resolvers/zod/src/zod.ts"],"sourcesContent":["import Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\n\n// ----------------------------------------------------------------------\n\nexport function FormHead({ sx, icon, title, description, ...other }) {\n  return (\n    <>\n      {icon && (\n        <Box component=\"span\" sx={{ mb: 3, mx: 'auto', display: 'inline-flex' }}>\n          {icon}\n        </Box>\n      )}\n\n      <Box\n        sx={[\n          () => ({\n            mb: 5,\n            gap: 1.5,\n            display: 'flex',\n            textAlign: 'center',\n            whiteSpace: 'pre-line',\n            flexDirection: 'column',\n          }),\n          ...(Array.isArray(sx) ? sx : [sx]),\n        ]}\n        {...other}\n      >\n        <Typography variant=\"h5\">{title}</Typography>\n\n        {description && (\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n            {description}\n          </Typography>\n        )}\n      </Box>\n    </>\n  );\n}\n","import Link from '@mui/material/Link';\n\nimport { RouterLink } from 'src/routes/components';\n\nimport { Iconify } from 'src/components/iconify';\n\n// ----------------------------------------------------------------------\n\nexport function FormReturnLink({ sx, href, label, icon, children, ...other }) {\n  return (\n    <Link\n      component={RouterLink}\n      href={href}\n      color=\"inherit\"\n      variant=\"subtitle2\"\n      sx={[\n        {\n          mt: 3,\n          gap: 0.5,\n          mx: 'auto',\n          alignItems: 'center',\n          display: 'inline-flex',\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...other}\n    >\n      {icon || <Iconify width={16} icon=\"eva:arrow-ios-back-fill\" />}\n      {label || 'Return to sign in'}\n      {children}\n    </Link>\n  );\n}\n","import Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\n\n// ----------------------------------------------------------------------\n\nexport function SignUpTerms({ sx, ...other }) {\n  return (\n    <Box\n      component=\"span\"\n      sx={[\n        () => ({\n          mt: 3,\n          display: 'block',\n          textAlign: 'center',\n          typography: 'caption',\n          color: 'text.secondary',\n        }),\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...other}\n    >\n      {'By signing up, I agree to '}\n      <Link underline=\"always\" color=\"text.primary\">\n        Terms of service\n      </Link>\n      {' and '}\n      <Link underline=\"always\" color=\"text.primary\">\n        Privacy policy\n      </Link>\n      .\n    </Box>\n  );\n}\n","// ----------------------------------------------------------------------\n\nexport function getErrorMessage(error) {\n  if (error instanceof Error) {\n    return error.message || error.name || 'An error occurred';\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (typeof error === 'object' && error !== null) {\n    const errorMessage = error.message;\n    if (typeof errorMessage === 'string') {\n      return errorMessage;\n    }\n  }\n\n  return `Unknown error: ${error}`;\n}\n","import { paths } from 'src/routes/paths';\n\nimport { EmailInboxIcon } from 'src/assets/icons';\n\nimport { FormHead } from '../../components/form-head';\nimport { FormReturnLink } from '../../components/form-return-link';\n\n// ----------------------------------------------------------------------\n\nexport function SupabaseVerifyView() {\n  return (\n    <>\n      <FormHead\n        icon={<EmailInboxIcon />}\n        title=\"Please check your email!\"\n        description={`We've emailed a 6-digit confirmation code. \\nPlease enter the code in the box below to verify your email.`}\n      />\n\n      <FormReturnLink href={paths.auth.supabase.signIn} sx={{ mt: 0 }} />\n    </>\n  );\n}\n","import { z as zod } from 'zod';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useBoolean } from 'minimal-shared/hooks';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nimport Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport InputAdornment from '@mui/material/InputAdornment';\n\nimport { paths } from 'src/routes/paths';\nimport { useRouter } from 'src/routes/hooks';\nimport { RouterLink } from 'src/routes/components';\n\nimport { Iconify } from 'src/components/iconify';\nimport { Form, Field } from 'src/components/hook-form';\n\nimport { useAuthContext } from '../../hooks';\nimport { getErrorMessage } from '../../utils';\nimport { FormHead } from '../../components/form-head';\nimport { signInWithPassword } from '../../context/supabase';\n\n// ----------------------------------------------------------------------\n\nexport const SignInSchema = zod.object({\n  email: zod\n    .string()\n    .min(1, { message: 'Email is required!' })\n    .email({ message: 'Email must be a valid email address!' }),\n  password: zod\n    .string()\n    .min(1, { message: 'Password is required!' })\n    .min(6, { message: 'Password must be at least 6 characters!' }),\n});\n\n// ----------------------------------------------------------------------\n\nexport function SupabaseSignInView() {\n  const router = useRouter();\n\n  const showPassword = useBoolean();\n\n  const { checkUserSession } = useAuthContext();\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const defaultValues = {\n    email: '',\n    password: '',\n  };\n\n  const methods = useForm({\n    resolver: zodResolver(SignInSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await signInWithPassword({ email: data.email, password: data.password });\n      await checkUserSession?.();\n\n      router.refresh();\n    } catch (error) {\n      console.error(error);\n      const feedbackMessage = getErrorMessage(error);\n      setErrorMessage(feedbackMessage);\n    }\n  });\n\n  const renderForm = () => (\n    <Box sx={{ gap: 3, display: 'flex', flexDirection: 'column' }}>\n      <Field.Text name=\"email\" label=\"Email address\" slotProps={{ inputLabel: { shrink: true } }} />\n\n      <Box sx={{ gap: 1.5, display: 'flex', flexDirection: 'column' }}>\n        <Link\n          component={RouterLink}\n          href={paths.auth.supabase.resetPassword}\n          variant=\"body2\"\n          color=\"inherit\"\n          sx={{ alignSelf: 'flex-end' }}\n        >\n          Forgot password?\n        </Link>\n\n        <Field.Text\n          name=\"password\"\n          label=\"Password\"\n          placeholder=\"6+ characters\"\n          type={showPassword.value ? 'text' : 'password'}\n          slotProps={{\n            inputLabel: { shrink: true },\n            input: {\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={showPassword.onToggle} edge=\"end\">\n                    <Iconify\n                      icon={showPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'}\n                    />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            },\n          }}\n        />\n      </Box>\n\n      <LoadingButton\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        loadingIndicator=\"Sign in...\"\n      >\n        Sign in\n      </LoadingButton>\n    </Box>\n  );\n\n  return (\n    <>\n      <FormHead\n        title=\"Sign in to your account\"\n        description={\n          <>\n            {`Don’t have an account? `}\n            <Link component={RouterLink} href={paths.auth.supabase.signUp} variant=\"subtitle2\">\n              Get started\n            </Link>\n          </>\n        }\n        sx={{ textAlign: { xs: 'center', md: 'left' } }}\n      />\n\n      {!!errorMessage && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {errorMessage}\n        </Alert>\n      )}\n\n      <Form methods={methods} onSubmit={onSubmit}>\n        {renderForm()}\n      </Form>\n    </>\n  );\n}\n","import { z as zod } from 'zod';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useBoolean } from 'minimal-shared/hooks';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nimport Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport InputAdornment from '@mui/material/InputAdornment';\n\nimport { paths } from 'src/routes/paths';\nimport { useRouter } from 'src/routes/hooks';\nimport { RouterLink } from 'src/routes/components';\n\nimport { Iconify } from 'src/components/iconify';\nimport { Form, Field } from 'src/components/hook-form';\n\nimport { getErrorMessage } from '../../utils';\nimport { signUp } from '../../context/supabase';\nimport { FormHead } from '../../components/form-head';\nimport { SignUpTerms } from '../../components/sign-up-terms';\n\n// ----------------------------------------------------------------------\n\nexport const SignUpSchema = zod.object({\n  firstName: zod.string().min(1, { message: 'First name is required!' }),\n  lastName: zod.string().min(1, { message: 'Last name is required!' }),\n  email: zod\n    .string()\n    .min(1, { message: 'Email is required!' })\n    .email({ message: 'Email must be a valid email address!' }),\n  password: zod\n    .string()\n    .min(1, { message: 'Password is required!' })\n    .min(6, { message: 'Password must be at least 6 characters!' }),\n});\n\n// ----------------------------------------------------------------------\n\nexport function SupabaseSignUpView() {\n  const router = useRouter();\n\n  const showPassword = useBoolean();\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const defaultValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  };\n\n  const methods = useForm({\n    resolver: zodResolver(SignUpSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await signUp({\n        email: data.email,\n        password: data.password,\n        firstName: data.firstName,\n        lastName: data.lastName,\n      });\n\n      router.push(paths.auth.supabase.verify);\n    } catch (error) {\n      console.error(error);\n      const feedbackMessage = getErrorMessage(error);\n      setErrorMessage(feedbackMessage);\n    }\n  });\n\n  const renderForm = () => (\n    <Box sx={{ gap: 3, display: 'flex', flexDirection: 'column' }}>\n      <Box\n        sx={{ display: 'flex', gap: { xs: 3, sm: 2 }, flexDirection: { xs: 'column', sm: 'row' } }}\n      >\n        <Field.Text\n          name=\"firstName\"\n          label=\"First name\"\n          slotProps={{ inputLabel: { shrink: true } }}\n        />\n        <Field.Text\n          name=\"lastName\"\n          label=\"Last name\"\n          slotProps={{ inputLabel: { shrink: true } }}\n        />\n      </Box>\n\n      <Field.Text name=\"email\" label=\"Email address\" slotProps={{ inputLabel: { shrink: true } }} />\n\n      <Field.Text\n        name=\"password\"\n        label=\"Password\"\n        placeholder=\"6+ characters\"\n        type={showPassword.value ? 'text' : 'password'}\n        slotProps={{\n          inputLabel: { shrink: true },\n          input: {\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={showPassword.onToggle} edge=\"end\">\n                  <Iconify icon={showPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          },\n        }}\n      />\n\n      <LoadingButton\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        loadingIndicator=\"Create account...\"\n      >\n        Create account\n      </LoadingButton>\n    </Box>\n  );\n\n  return (\n    <>\n      <FormHead\n        title=\"Get started absolutely free\"\n        description={\n          <>\n            {`Already have an account? `}\n            <Link component={RouterLink} href={paths.auth.supabase.signIn} variant=\"subtitle2\">\n              Get started\n            </Link>\n          </>\n        }\n        sx={{ textAlign: { xs: 'center', md: 'left' } }}\n      />\n\n      {!!errorMessage && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {errorMessage}\n        </Alert>\n      )}\n\n      <Form methods={methods} onSubmit={onSubmit}>\n        {renderForm()}\n      </Form>\n\n      <SignUpTerms />\n    </>\n  );\n}\n","import { z as zod } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nimport Box from '@mui/material/Box';\nimport LoadingButton from '@mui/lab/LoadingButton';\n\nimport { paths } from 'src/routes/paths';\nimport { useRouter } from 'src/routes/hooks';\n\nimport { PasswordIcon } from 'src/assets/icons';\n\nimport { Form, Field } from 'src/components/hook-form';\n\nimport { FormHead } from '../../components/form-head';\nimport { resetPassword } from '../../context/supabase';\nimport { FormReturnLink } from '../../components/form-return-link';\n\n// ----------------------------------------------------------------------\n\nexport const ResetPasswordSchema = zod.object({\n  email: zod\n    .string()\n    .min(1, { message: 'Email is required!' })\n    .email({ message: 'Email must be a valid email address!' }),\n});\n\n// ----------------------------------------------------------------------\n\nexport function SupabaseResetPasswordView() {\n  const router = useRouter();\n\n  const defaultValues = {\n    email: '',\n  };\n\n  const methods = useForm({\n    resolver: zodResolver(ResetPasswordSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await resetPassword({ email: data.email });\n\n      router.push(paths.auth.supabase.verify);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const renderForm = () => (\n    <Box sx={{ gap: 3, display: 'flex', flexDirection: 'column' }}>\n      <Field.Text\n        autoFocus\n        name=\"email\"\n        label=\"Email address\"\n        placeholder=\"example@gmail.com\"\n        slotProps={{ inputLabel: { shrink: true } }}\n      />\n\n      <LoadingButton\n        fullWidth\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        loadingIndicator=\"Send request...\"\n      >\n        Send request\n      </LoadingButton>\n    </Box>\n  );\n\n  return (\n    <>\n      <FormHead\n        icon={<PasswordIcon />}\n        title=\"Forgot your password?\"\n        description={`Please enter the email address associated with your account and we'll email you a link to reset your password.`}\n      />\n\n      <Form methods={methods} onSubmit={onSubmit}>\n        {renderForm()}\n      </Form>\n\n      <FormReturnLink href={paths.auth.supabase.signIn} />\n    </>\n  );\n}\n","import { z as zod } from 'zod';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useBoolean } from 'minimal-shared/hooks';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nimport Box from '@mui/material/Box';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport InputAdornment from '@mui/material/InputAdornment';\n\nimport { paths } from 'src/routes/paths';\nimport { useRouter } from 'src/routes/hooks';\n\nimport { NewPasswordIcon } from 'src/assets/icons';\n\nimport { Iconify } from 'src/components/iconify';\nimport { Form, Field } from 'src/components/hook-form';\n\nimport { getErrorMessage } from '../../utils';\nimport { FormHead } from '../../components/form-head';\nimport { updatePassword } from '../../context/supabase';\n\n// ----------------------------------------------------------------------\n\nexport const UpdatePasswordSchema = zod\n  .object({\n    password: zod\n      .string()\n      .min(1, { message: 'Password is required!' })\n      .min(6, { message: 'Password must be at least 6 characters!' }),\n    confirmPassword: zod.string().min(1, { message: 'Confirm password is required!' }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: 'Passwords do not match!',\n    path: ['confirmPassword'],\n  });\n\n// ----------------------------------------------------------------------\n\nexport function SupabaseUpdatePasswordView() {\n  const router = useRouter();\n\n  const showPassword = useBoolean();\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const defaultValues = {\n    password: '',\n    confirmPassword: '',\n  };\n\n  const methods = useForm({\n    resolver: zodResolver(UpdatePasswordSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await updatePassword({ password: data.password });\n\n      router.push(paths.dashboard.root);\n    } catch (error) {\n      console.error(error);\n      const feedbackMessage = getErrorMessage(error);\n      setErrorMessage(feedbackMessage);\n    }\n  });\n\n  const renderForm = () => (\n    <Box sx={{ gap: 3, display: 'flex', flexDirection: 'column' }}>\n      <Field.Text\n        name=\"password\"\n        label=\"Password\"\n        placeholder=\"6+ characters\"\n        type={showPassword.value ? 'text' : 'password'}\n        slotProps={{\n          inputLabel: { shrink: true },\n          input: {\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={showPassword.onToggle} edge=\"end\">\n                  <Iconify icon={showPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          },\n        }}\n      />\n\n      <Field.Text\n        name=\"confirmPassword\"\n        label=\"Confirm password\"\n        type={showPassword.value ? 'text' : 'password'}\n        slotProps={{\n          inputLabel: { shrink: true },\n          input: {\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={showPassword.onToggle} edge=\"end\">\n                  <Iconify icon={showPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          },\n        }}\n      />\n\n      <LoadingButton\n        fullWidth\n        type=\"submit\"\n        size=\"large\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        loadingIndicator=\"Update password...\"\n      >\n        Update password\n      </LoadingButton>\n    </Box>\n  );\n\n  return (\n    <>\n      <FormHead\n        icon={<NewPasswordIcon />}\n        title=\"Update password\"\n        description=\"Successful updates enable access using the new password.\"\n      />\n\n      {!!errorMessage && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {errorMessage}\n        </Alert>\n      )}\n\n      <Form methods={methods} onSubmit={onSubmit}>\n        {renderForm()}\n      </Form>\n    </>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n\nimport { CONFIG } from 'src/global-config';\n\nimport { SupabaseVerifyView } from 'src/auth/view/supabase';\n\n// ----------------------------------------------------------------------\n\nconst metadata = { title: `Verify | Supabase - ${CONFIG.appName}` };\n\nexport default function Page() {\n  return (\n    <>\n      <Helmet>\n        <title> {metadata.title}</title>\n      </Helmet>\n\n      <SupabaseVerifyView />\n    </>\n  );\n}\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Ref,\n  ResolverOptions,\n  get,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  Field,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n  ResolverOptions,\n  get,\n  set,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n","import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport { FieldError, FieldErrors, appendErrors } from 'react-hook-form';\nimport { ZodError, z } from 'zod';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError =>\n  Array.isArray(error?.errors);\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"names":["FormHead","_ref","sx","icon","title","description","other","_jsxs","_Fragment","children","_jsx","Box","component","mb","mx","display","gap","textAlign","whiteSpace","flexDirection","Array","isArray","Typography","variant","color","FormReturnLink","href","label","Link","RouterLink","mt","alignItems","Iconify","width","SignUpTerms","typography","underline","getErrorMessage","error","Error","message","name","errorMessage","SupabaseVerifyView","EmailInboxIcon","paths","auth","supabase","signIn","SignInSchema","zod","object","email","string","min","password","SupabaseSignInView","router","useRouter","showPassword","useBoolean","checkUserSession","useAuthContext","setErrorMessage","useState","methods","useForm","resolver","zodResolver","defaultValues","handleSubmit","formState","isSubmitting","onSubmit","async","signInWithPassword","data","refresh","console","feedbackMessage","signUp","xs","md","Alert","severity","Form","Field","Text","slotProps","inputLabel","shrink","resetPassword","alignSelf","placeholder","type","value","input","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","LoadingButton","fullWidth","size","loading","loadingIndicator","SignUpSchema","firstName","lastName","SupabaseSignUpView","push","verify","sm","ResetPasswordSchema","SupabaseResetPasswordView","PasswordIcon","autoFocus","UpdatePasswordSchema","confirmPassword","refine","path","SupabaseUpdatePasswordView","updatePassword","dashboard","root","NewPasswordIcon","metadata","CONFIG","appName","Page","Helmet","s","e","o","r","t","setCustomValidity","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","f","n","a","Object","assign","i","names","keys","some","startsWith","length","code","join","u","unionErrors","errors","c","types","concat","shift","Promise","resolve","mode","then","values","raw","criteriaMode","reject"],"sourceRoot":""}