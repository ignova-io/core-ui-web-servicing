{"version":3,"file":"static/js/9262.f445eb2c.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/turndown/lib/turndown.browser.es.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/unist-util-find-after/lib/index.js","../node_modules/hast-util-is-element/lib/index.js","../node_modules/hast-util-to-text/lib/index.js","../node_modules/rehype-highlight/lib/index.js","../node_modules/hast-util-parse-selector/lib/index.js","../node_modules/hastscript/lib/create-h.js","../node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","../node_modules/hastscript/lib/index.js","../node_modules/vfile-location/lib/index.js","../node_modules/web-namespaces/index.js","../node_modules/hast-util-from-parse5/lib/index.js","../node_modules/zwitch/index.js","../node_modules/hast-util-to-parse5/lib/index.js","../node_modules/html-void-elements/index.js","../node_modules/parse5/dist/common/unicode.js","../node_modules/parse5/dist/common/error-codes.js","../node_modules/parse5/dist/tokenizer/preprocessor.js","../node_modules/parse5/dist/common/token.js","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/decode-data-html.ts","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/generated/decode-data-xml.ts","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode_codepoint.ts","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode.ts","../node_modules/parse5/dist/common/html.js","../node_modules/parse5/dist/tokenizer/index.js","../node_modules/parse5/dist/parser/open-element-stack.js","../node_modules/parse5/dist/parser/formatting-element-list.js","../node_modules/parse5/dist/tree-adapters/default.js","../node_modules/parse5/dist/common/doctype.js","../node_modules/parse5/dist/common/foreign-content.js","../node_modules/parse5/dist/parser/index.js","https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/escape.ts","../node_modules/parse5/dist/serializer/index.js","../node_modules/hast-util-raw/lib/index.js","../node_modules/rehype-raw/lib/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","function extend (destination) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) destination[key] = source[key];\n    }\n  }\n  return destination\n}\n\nfunction repeat (character, count) {\n  return Array(count + 1).join(character)\n}\n\nfunction trimLeadingNewlines (string) {\n  return string.replace(/^\\n*/, '')\n}\n\nfunction trimTrailingNewlines (string) {\n  // avoid match-at-end regexp bottleneck, see #370\n  var indexEnd = string.length;\n  while (indexEnd > 0 && string[indexEnd - 1] === '\\n') indexEnd--;\n  return string.substring(0, indexEnd)\n}\n\nvar blockElements = [\n  'ADDRESS', 'ARTICLE', 'ASIDE', 'AUDIO', 'BLOCKQUOTE', 'BODY', 'CANVAS',\n  'CENTER', 'DD', 'DIR', 'DIV', 'DL', 'DT', 'FIELDSET', 'FIGCAPTION', 'FIGURE',\n  'FOOTER', 'FORM', 'FRAMESET', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEADER',\n  'HGROUP', 'HR', 'HTML', 'ISINDEX', 'LI', 'MAIN', 'MENU', 'NAV', 'NOFRAMES',\n  'NOSCRIPT', 'OL', 'OUTPUT', 'P', 'PRE', 'SECTION', 'TABLE', 'TBODY', 'TD',\n  'TFOOT', 'TH', 'THEAD', 'TR', 'UL'\n];\n\nfunction isBlock (node) {\n  return is(node, blockElements)\n}\n\nvar voidElements = [\n  'AREA', 'BASE', 'BR', 'COL', 'COMMAND', 'EMBED', 'HR', 'IMG', 'INPUT',\n  'KEYGEN', 'LINK', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR'\n];\n\nfunction isVoid (node) {\n  return is(node, voidElements)\n}\n\nfunction hasVoid (node) {\n  return has(node, voidElements)\n}\n\nvar meaningfulWhenBlankElements = [\n  'A', 'TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TH', 'TD', 'IFRAME', 'SCRIPT',\n  'AUDIO', 'VIDEO'\n];\n\nfunction isMeaningfulWhenBlank (node) {\n  return is(node, meaningfulWhenBlankElements)\n}\n\nfunction hasMeaningfulWhenBlank (node) {\n  return has(node, meaningfulWhenBlankElements)\n}\n\nfunction is (node, tagNames) {\n  return tagNames.indexOf(node.nodeName) >= 0\n}\n\nfunction has (node, tagNames) {\n  return (\n    node.getElementsByTagName &&\n    tagNames.some(function (tagName) {\n      return node.getElementsByTagName(tagName).length\n    })\n  )\n}\n\nvar rules = {};\n\nrules.paragraph = {\n  filter: 'p',\n\n  replacement: function (content) {\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.lineBreak = {\n  filter: 'br',\n\n  replacement: function (content, node, options) {\n    return options.br + '\\n'\n  }\n};\n\nrules.heading = {\n  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n  replacement: function (content, node, options) {\n    var hLevel = Number(node.nodeName.charAt(1));\n\n    if (options.headingStyle === 'setext' && hLevel < 3) {\n      var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\n      return (\n        '\\n\\n' + content + '\\n' + underline + '\\n\\n'\n      )\n    } else {\n      return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.blockquote = {\n  filter: 'blockquote',\n\n  replacement: function (content) {\n    content = content.replace(/^\\n+|\\n+$/g, '');\n    content = content.replace(/^/gm, '> ');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.list = {\n  filter: ['ul', 'ol'],\n\n  replacement: function (content, node) {\n    var parent = node.parentNode;\n    if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\n      return '\\n' + content\n    } else {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.listItem = {\n  filter: 'li',\n\n  replacement: function (content, node, options) {\n    content = content\n      .replace(/^\\n+/, '') // remove leading newlines\n      .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n      .replace(/\\n/gm, '\\n    '); // indent\n    var prefix = options.bulletListMarker + '   ';\n    var parent = node.parentNode;\n    if (parent.nodeName === 'OL') {\n      var start = parent.getAttribute('start');\n      var index = Array.prototype.indexOf.call(parent.children, node);\n      prefix = (start ? Number(start) + index : index + 1) + '.  ';\n    }\n    return (\n      prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\n    )\n  }\n};\n\nrules.indentedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'indented' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    return (\n      '\\n\\n    ' +\n      node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\n      '\\n\\n'\n    )\n  }\n};\n\nrules.fencedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'fenced' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var className = node.firstChild.getAttribute('class') || '';\n    var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n    var code = node.firstChild.textContent;\n\n    var fenceChar = options.fence.charAt(0);\n    var fenceSize = 3;\n    var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');\n\n    var match;\n    while ((match = fenceInCodeRegex.exec(code))) {\n      if (match[0].length >= fenceSize) {\n        fenceSize = match[0].length + 1;\n      }\n    }\n\n    var fence = repeat(fenceChar, fenceSize);\n\n    return (\n      '\\n\\n' + fence + language + '\\n' +\n      code.replace(/\\n$/, '') +\n      '\\n' + fence + '\\n\\n'\n    )\n  }\n};\n\nrules.horizontalRule = {\n  filter: 'hr',\n\n  replacement: function (content, node, options) {\n    return '\\n\\n' + options.hr + '\\n\\n'\n  }\n};\n\nrules.inlineLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'inlined' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node) {\n    var href = node.getAttribute('href');\n    if (href) href = href.replace(/([()])/g, '\\\\$1');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title.replace(/\"/g, '\\\\\"') + '\"';\n    return '[' + content + '](' + href + title + ')'\n  }\n};\n\nrules.referenceLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'referenced' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var href = node.getAttribute('href');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title + '\"';\n    var replacement;\n    var reference;\n\n    switch (options.linkReferenceStyle) {\n      case 'collapsed':\n        replacement = '[' + content + '][]';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      case 'shortcut':\n        replacement = '[' + content + ']';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      default:\n        var id = this.references.length + 1;\n        replacement = '[' + content + '][' + id + ']';\n        reference = '[' + id + ']: ' + href + title;\n    }\n\n    this.references.push(reference);\n    return replacement\n  },\n\n  references: [],\n\n  append: function (options) {\n    var references = '';\n    if (this.references.length) {\n      references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n      this.references = []; // Reset references\n    }\n    return references\n  }\n};\n\nrules.emphasis = {\n  filter: ['em', 'i'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.emDelimiter + content + options.emDelimiter\n  }\n};\n\nrules.strong = {\n  filter: ['strong', 'b'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.strongDelimiter + content + options.strongDelimiter\n  }\n};\n\nrules.code = {\n  filter: function (node) {\n    var hasSiblings = node.previousSibling || node.nextSibling;\n    var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n    return node.nodeName === 'CODE' && !isCodeBlock\n  },\n\n  replacement: function (content) {\n    if (!content) return ''\n    content = content.replace(/\\r?\\n|\\r/g, ' ');\n\n    var extraSpace = /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';\n    var delimiter = '`';\n    var matches = content.match(/`+/gm) || [];\n    while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n\n    return delimiter + extraSpace + content + extraSpace + delimiter\n  }\n};\n\nrules.image = {\n  filter: 'img',\n\n  replacement: function (content, node) {\n    var alt = cleanAttribute(node.getAttribute('alt'));\n    var src = node.getAttribute('src') || '';\n    var title = cleanAttribute(node.getAttribute('title'));\n    var titlePart = title ? ' \"' + title + '\"' : '';\n    return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\n  }\n};\n\nfunction cleanAttribute (attribute) {\n  return attribute ? attribute.replace(/(\\n+\\s*)+/g, '\\n') : ''\n}\n\n/**\n * Manages a collection of rules used to convert HTML to Markdown\n */\n\nfunction Rules (options) {\n  this.options = options;\n  this._keep = [];\n  this._remove = [];\n\n  this.blankRule = {\n    replacement: options.blankReplacement\n  };\n\n  this.keepReplacement = options.keepReplacement;\n\n  this.defaultRule = {\n    replacement: options.defaultReplacement\n  };\n\n  this.array = [];\n  for (var key in options.rules) this.array.push(options.rules[key]);\n}\n\nRules.prototype = {\n  add: function (key, rule) {\n    this.array.unshift(rule);\n  },\n\n  keep: function (filter) {\n    this._keep.unshift({\n      filter: filter,\n      replacement: this.keepReplacement\n    });\n  },\n\n  remove: function (filter) {\n    this._remove.unshift({\n      filter: filter,\n      replacement: function () {\n        return ''\n      }\n    });\n  },\n\n  forNode: function (node) {\n    if (node.isBlank) return this.blankRule\n    var rule;\n\n    if ((rule = findRule(this.array, node, this.options))) return rule\n    if ((rule = findRule(this._keep, node, this.options))) return rule\n    if ((rule = findRule(this._remove, node, this.options))) return rule\n\n    return this.defaultRule\n  },\n\n  forEach: function (fn) {\n    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n  }\n};\n\nfunction findRule (rules, node, options) {\n  for (var i = 0; i < rules.length; i++) {\n    var rule = rules[i];\n    if (filterValue(rule, node, options)) return rule\n  }\n  return void 0\n}\n\nfunction filterValue (rule, node, options) {\n  var filter = rule.filter;\n  if (typeof filter === 'string') {\n    if (filter === node.nodeName.toLowerCase()) return true\n  } else if (Array.isArray(filter)) {\n    if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\n  } else if (typeof filter === 'function') {\n    if (filter.call(rule, node, options)) return true\n  } else {\n    throw new TypeError('`filter` needs to be a string, array, or function')\n  }\n}\n\n/**\n * The collapseWhitespace function is adapted from collapse-whitespace\n * by Luc Thevenard.\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n *\n * @param {Object} options\n */\nfunction collapseWhitespace (options) {\n  var element = options.element;\n  var isBlock = options.isBlock;\n  var isVoid = options.isVoid;\n  var isPre = options.isPre || function (node) {\n    return node.nodeName === 'PRE'\n  };\n\n  if (!element.firstChild || isPre(element)) return\n\n  var prevText = null;\n  var keepLeadingWs = false;\n\n  var prev = null;\n  var node = next(prev, element, isPre);\n\n  while (node !== element) {\n    if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n      var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\n\n      if ((!prevText || / $/.test(prevText.data)) &&\n          !keepLeadingWs && text[0] === ' ') {\n        text = text.substr(1);\n      }\n\n      // `text` might be empty at this point.\n      if (!text) {\n        node = remove(node);\n        continue\n      }\n\n      node.data = text;\n\n      prevText = node;\n    } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\n      if (isBlock(node) || node.nodeName === 'BR') {\n        if (prevText) {\n          prevText.data = prevText.data.replace(/ $/, '');\n        }\n\n        prevText = null;\n        keepLeadingWs = false;\n      } else if (isVoid(node) || isPre(node)) {\n        // Avoid trimming space around non-block, non-BR void elements and inline PRE.\n        prevText = null;\n        keepLeadingWs = true;\n      } else if (prevText) {\n        // Drop protection if set previously.\n        keepLeadingWs = false;\n      }\n    } else {\n      node = remove(node);\n      continue\n    }\n\n    var nextNode = next(prev, node, isPre);\n    prev = node;\n    node = nextNode;\n  }\n\n  if (prevText) {\n    prevText.data = prevText.data.replace(/ $/, '');\n    if (!prevText.data) {\n      remove(prevText);\n    }\n  }\n}\n\n/**\n * remove(node) removes the given node from the DOM and returns the\n * next node in the sequence.\n *\n * @param {Node} node\n * @return {Node} node\n */\nfunction remove (node) {\n  var next = node.nextSibling || node.parentNode;\n\n  node.parentNode.removeChild(node);\n\n  return next\n}\n\n/**\n * next(prev, current, isPre) returns the next node in the sequence, given the\n * current and previous nodes.\n *\n * @param {Node} prev\n * @param {Node} current\n * @param {Function} isPre\n * @return {Node}\n */\nfunction next (prev, current, isPre) {\n  if ((prev && prev.parentNode === current) || isPre(current)) {\n    return current.nextSibling || current.parentNode\n  }\n\n  return current.firstChild || current.nextSibling || current.parentNode\n}\n\n/*\n * Set up window for Node.js\n */\n\nvar root = (typeof window !== 'undefined' ? window : {});\n\n/*\n * Parsing HTML strings\n */\n\nfunction canParseHTMLNatively () {\n  var Parser = root.DOMParser;\n  var canParse = false;\n\n  // Adapted from https://gist.github.com/1129031\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if (new Parser().parseFromString('', 'text/html')) {\n      canParse = true;\n    }\n  } catch (e) {}\n\n  return canParse\n}\n\nfunction createHTMLParser () {\n  var Parser = function () {};\n\n  {\n    if (shouldUseActiveX()) {\n      Parser.prototype.parseFromString = function (string) {\n        var doc = new window.ActiveXObject('htmlfile');\n        doc.designMode = 'on'; // disable on-page scripts\n        doc.open();\n        doc.write(string);\n        doc.close();\n        return doc\n      };\n    } else {\n      Parser.prototype.parseFromString = function (string) {\n        var doc = document.implementation.createHTMLDocument('');\n        doc.open();\n        doc.write(string);\n        doc.close();\n        return doc\n      };\n    }\n  }\n  return Parser\n}\n\nfunction shouldUseActiveX () {\n  var useActiveX = false;\n  try {\n    document.implementation.createHTMLDocument('').open();\n  } catch (e) {\n    if (root.ActiveXObject) useActiveX = true;\n  }\n  return useActiveX\n}\n\nvar HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\n\nfunction RootNode (input, options) {\n  var root;\n  if (typeof input === 'string') {\n    var doc = htmlParser().parseFromString(\n      // DOM parsers arrange elements in the <head> and <body>.\n      // Wrapping in a custom element ensures elements are reliably arranged in\n      // a single element.\n      '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\n      'text/html'\n    );\n    root = doc.getElementById('turndown-root');\n  } else {\n    root = input.cloneNode(true);\n  }\n  collapseWhitespace({\n    element: root,\n    isBlock: isBlock,\n    isVoid: isVoid,\n    isPre: options.preformattedCode ? isPreOrCode : null\n  });\n\n  return root\n}\n\nvar _htmlParser;\nfunction htmlParser () {\n  _htmlParser = _htmlParser || new HTMLParser();\n  return _htmlParser\n}\n\nfunction isPreOrCode (node) {\n  return node.nodeName === 'PRE' || node.nodeName === 'CODE'\n}\n\nfunction Node (node, options) {\n  node.isBlock = isBlock(node);\n  node.isCode = node.nodeName === 'CODE' || node.parentNode.isCode;\n  node.isBlank = isBlank(node);\n  node.flankingWhitespace = flankingWhitespace(node, options);\n  return node\n}\n\nfunction isBlank (node) {\n  return (\n    !isVoid(node) &&\n    !isMeaningfulWhenBlank(node) &&\n    /^\\s*$/i.test(node.textContent) &&\n    !hasVoid(node) &&\n    !hasMeaningfulWhenBlank(node)\n  )\n}\n\nfunction flankingWhitespace (node, options) {\n  if (node.isBlock || (options.preformattedCode && node.isCode)) {\n    return { leading: '', trailing: '' }\n  }\n\n  var edges = edgeWhitespace(node.textContent);\n\n  // abandon leading ASCII WS if left-flanked by ASCII WS\n  if (edges.leadingAscii && isFlankedByWhitespace('left', node, options)) {\n    edges.leading = edges.leadingNonAscii;\n  }\n\n  // abandon trailing ASCII WS if right-flanked by ASCII WS\n  if (edges.trailingAscii && isFlankedByWhitespace('right', node, options)) {\n    edges.trailing = edges.trailingNonAscii;\n  }\n\n  return { leading: edges.leading, trailing: edges.trailing }\n}\n\nfunction edgeWhitespace (string) {\n  var m = string.match(/^(([ \\t\\r\\n]*)(\\s*))(?:(?=\\S)[\\s\\S]*\\S)?((\\s*?)([ \\t\\r\\n]*))$/);\n  return {\n    leading: m[1], // whole string for whitespace-only strings\n    leadingAscii: m[2],\n    leadingNonAscii: m[3],\n    trailing: m[4], // empty for whitespace-only strings\n    trailingNonAscii: m[5],\n    trailingAscii: m[6]\n  }\n}\n\nfunction isFlankedByWhitespace (side, node, options) {\n  var sibling;\n  var regExp;\n  var isFlanked;\n\n  if (side === 'left') {\n    sibling = node.previousSibling;\n    regExp = / $/;\n  } else {\n    sibling = node.nextSibling;\n    regExp = /^ /;\n  }\n\n  if (sibling) {\n    if (sibling.nodeType === 3) {\n      isFlanked = regExp.test(sibling.nodeValue);\n    } else if (options.preformattedCode && sibling.nodeName === 'CODE') {\n      isFlanked = false;\n    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\n      isFlanked = regExp.test(sibling.textContent);\n    }\n  }\n  return isFlanked\n}\n\nvar reduce = Array.prototype.reduce;\nvar escapes = [\n  [/\\\\/g, '\\\\\\\\'],\n  [/\\*/g, '\\\\*'],\n  [/^-/g, '\\\\-'],\n  [/^\\+ /g, '\\\\+ '],\n  [/^(=+)/g, '\\\\$1'],\n  [/^(#{1,6}) /g, '\\\\$1 '],\n  [/`/g, '\\\\`'],\n  [/^~~~/g, '\\\\~~~'],\n  [/\\[/g, '\\\\['],\n  [/\\]/g, '\\\\]'],\n  [/^>/g, '\\\\>'],\n  [/_/g, '\\\\_'],\n  [/^(\\d+)\\. /g, '$1\\\\. ']\n];\n\nfunction TurndownService (options) {\n  if (!(this instanceof TurndownService)) return new TurndownService(options)\n\n  var defaults = {\n    rules: rules,\n    headingStyle: 'setext',\n    hr: '* * *',\n    bulletListMarker: '*',\n    codeBlockStyle: 'indented',\n    fence: '```',\n    emDelimiter: '_',\n    strongDelimiter: '**',\n    linkStyle: 'inlined',\n    linkReferenceStyle: 'full',\n    br: '  ',\n    preformattedCode: false,\n    blankReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' : ''\n    },\n    keepReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\n    },\n    defaultReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\n    }\n  };\n  this.options = extend({}, defaults, options);\n  this.rules = new Rules(this.options);\n}\n\nTurndownService.prototype = {\n  /**\n   * The entry point for converting a string or DOM node to Markdown\n   * @public\n   * @param {String|HTMLElement} input The string or DOM node to convert\n   * @returns A Markdown representation of the input\n   * @type String\n   */\n\n  turndown: function (input) {\n    if (!canConvert(input)) {\n      throw new TypeError(\n        input + ' is not a string, or an element/document/fragment node.'\n      )\n    }\n\n    if (input === '') return ''\n\n    var output = process.call(this, new RootNode(input, this.options));\n    return postProcess.call(this, output)\n  },\n\n  /**\n   * Add one or more plugins\n   * @public\n   * @param {Function|Array} plugin The plugin or array of plugins to add\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  use: function (plugin) {\n    if (Array.isArray(plugin)) {\n      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n    } else if (typeof plugin === 'function') {\n      plugin(this);\n    } else {\n      throw new TypeError('plugin must be a Function or an Array of Functions')\n    }\n    return this\n  },\n\n  /**\n   * Adds a rule\n   * @public\n   * @param {String} key The unique key of the rule\n   * @param {Object} rule The rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  addRule: function (key, rule) {\n    this.rules.add(key, rule);\n    return this\n  },\n\n  /**\n   * Keep a node (as HTML) that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  keep: function (filter) {\n    this.rules.keep(filter);\n    return this\n  },\n\n  /**\n   * Remove a node that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  remove: function (filter) {\n    this.rules.remove(filter);\n    return this\n  },\n\n  /**\n   * Escapes Markdown syntax\n   * @public\n   * @param {String} string The string to escape\n   * @returns A string with Markdown syntax escaped\n   * @type String\n   */\n\n  escape: function (string) {\n    return escapes.reduce(function (accumulator, escape) {\n      return accumulator.replace(escape[0], escape[1])\n    }, string)\n  }\n};\n\n/**\n * Reduces a DOM node down to its Markdown string equivalent\n * @private\n * @param {HTMLElement} parentNode The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction process (parentNode) {\n  var self = this;\n  return reduce.call(parentNode.childNodes, function (output, node) {\n    node = new Node(node, self.options);\n\n    var replacement = '';\n    if (node.nodeType === 3) {\n      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\n    } else if (node.nodeType === 1) {\n      replacement = replacementForNode.call(self, node);\n    }\n\n    return join(output, replacement)\n  }, '')\n}\n\n/**\n * Appends strings as each rule requires and trims the output\n * @private\n * @param {String} output The conversion output\n * @returns A trimmed version of the ouput\n * @type String\n */\n\nfunction postProcess (output) {\n  var self = this;\n  this.rules.forEach(function (rule) {\n    if (typeof rule.append === 'function') {\n      output = join(output, rule.append(self.options));\n    }\n  });\n\n  return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\n}\n\n/**\n * Converts an element node to its Markdown equivalent\n * @private\n * @param {HTMLElement} node The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction replacementForNode (node) {\n  var rule = this.rules.forNode(node);\n  var content = process.call(this, node);\n  var whitespace = node.flankingWhitespace;\n  if (whitespace.leading || whitespace.trailing) content = content.trim();\n  return (\n    whitespace.leading +\n    rule.replacement(content, node, this.options) +\n    whitespace.trailing\n  )\n}\n\n/**\n * Joins replacement to the current output with appropriate number of new lines\n * @private\n * @param {String} output The current conversion output\n * @param {String} replacement The string to append to the output\n * @returns Joined output\n * @type String\n */\n\nfunction join (output, replacement) {\n  var s1 = trimTrailingNewlines(output);\n  var s2 = trimLeadingNewlines(replacement);\n  var nls = Math.max(output.length - s1.length, replacement.length - s2.length);\n  var separator = '\\n\\n'.substring(0, nls);\n\n  return s1 + separator + s2\n}\n\n/**\n * Determines whether an input can be converted\n * @private\n * @param {String|HTMLElement} input Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\nfunction canConvert (input) {\n  return (\n    input != null && (\n      typeof input === 'string' ||\n      (input.nodeType && (\n        input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\n      ))\n    )\n  )\n}\n\nexport default TurndownService;\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {(\n *   Kind extends {children: Array<infer Child>}\n *   ? Child\n *   : never\n * )} Child\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Kind\n *   All node types.\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Find the first node in `parent` after another `node` or after an index,\n * that passes `test`.\n *\n * @param parent\n *   Parent node.\n * @param index\n *   Child node or index.\n * @param [test=undefined]\n *   Test for child to look for (optional).\n * @returns\n *   A child (matching `test`, if given) or `undefined`.\n */\nexport const findAfter =\n  // Note: overloads like this are needed to support optional generics.\n  /**\n   * @type {(\n   *   (<Kind extends UnistParent, Check extends Test>(parent: Kind, index: Child<Kind> | number, test: Check) => Matches<Child<Kind>, Check> | undefined) &\n   *   (<Kind extends UnistParent>(parent: Kind, index: Child<Kind> | number, test?: null | undefined) => Child<Kind> | undefined)\n   * )}\n   */\n  (\n    /**\n     * @param {UnistParent} parent\n     * @param {UnistNode | number} index\n     * @param {Test} [test]\n     * @returns {UnistNode | undefined}\n     */\n    function (parent, index, test) {\n      const is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return undefined\n    }\n  )\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is an element.\n * @param {unknown} this\n *   Context object (`this`) to call `test` with\n * @param {unknown} [element]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | null | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n *\n * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary element.\n *\n *   * when `string`, checks that the element has that tag name\n *   * when `function`, see `TestFunction`\n *   * when `Array`, checks if one of the subtests pass\n *\n * @callback TestFunction\n *   Check if an element passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Element} element\n *   An element.\n * @param {number | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean | undefined | void}\n *   Whether this element passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `element` is an `Element` and whether it passes the given test.\n *\n * @param element\n *   Thing to check, typically `element`.\n * @param test\n *   Check for a specific element.\n * @param index\n *   Position of `element` in its parent.\n * @param parent\n *   Parent of `element`.\n * @param context\n *   Context object (`this`) to call `test` with.\n * @returns\n *   Whether `element` is an `Element` and passes a test.\n * @throws\n *   When an incorrect `test`, `index`, or `parent` is given; there is no error\n *   thrown when `element` is not a node or not an element.\n */\nexport const isElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((element?: null | undefined) => false) &\n   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [element]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parents | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (element, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== null &&\n        index !== undefined &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite `index`')\n      }\n\n      if (\n        parent !== null &&\n        parent !== undefined &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected valid `parent`')\n      }\n\n      if (\n        (index === null || index === undefined) !==\n        (parent === null || parent === undefined)\n      ) {\n        throw new Error('Expected both `index` and `parent`')\n      }\n\n      return looksLikeAnElement(element)\n        ? check.call(context, element, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate a check from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * an `element`, `index`, and `parent`.\n *\n * @param test\n *   A test for a specific element.\n * @returns\n *   A check.\n */\nexport const convertElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      // Assume array.\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as `test`')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction tagNameFactory(check) {\n  return castFactory(tagName)\n\n  /**\n   * @param {Element} element\n   * @returns {boolean}\n   */\n  function tagName(element) {\n    return element.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeAnElement(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} element\n * @returns {element is Element}\n */\nfunction element(element) {\n  return Boolean(\n    element &&\n      typeof element === 'object' &&\n      'type' in element &&\n      element.type === 'element' &&\n      'tagName' in element &&\n      typeof element.tagName === 'string'\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Element}\n */\nfunction looksLikeAnElement(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'type' in value &&\n    'tagName' in value\n  )\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast-util-is-element').TestFunction} TestFunction\n */\n\n/**\n * @typedef {'normal' | 'nowrap' | 'pre' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n *\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n *\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n *\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n *\n * @typedef {BreakNumber | BreakValue | undefined} BreakBefore\n *   Any value for a break before.\n *\n * @typedef {BreakForce | BreakNumber | BreakValue | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use (default: `'normal'`).\n */\n\nimport {findAfter} from 'unist-util-find-after'\nimport {convertElement} from 'hast-util-is-element'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst cell = convertElement(isCell)\nconst p = convertElement('p')\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'li', // Lists (as `display: list-item`)\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Nodes} tree\n *   Tree to turn into text.\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree, options) {\n  const options_ = options || {}\n  const children = 'children' in tree ? tree.children : []\n  const block = blockOrCaption(tree)\n  const whitespace = inferWhitespace(tree, {\n    whitespace: options_.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n\n  /** @type {Array<BreakNumber | string>} */\n  const results = []\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push(\n      ...collectText(tree, {\n        whitespace,\n        breakBefore: true,\n        breakAfter: true\n      })\n    )\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  let index = -1\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push(\n      ...renderedTextCollection(\n        children[index],\n        // @ts-expect-error: `tree` is a parent if we’re here.\n        tree,\n        {\n          whitespace,\n          breakBefore: index ? undefined : block,\n          breakAfter:\n            index < children.length - 1 ? br(children[index + 1]) : block\n        }\n      )\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {number | undefined} */\n  let count\n\n  index = -1\n\n  while (++index < results.length) {\n    const value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ')\n      }\n\n      count = -1\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/multipage/dom.html#rendered-text-collection-steps>\n *\n * @param {Nodes} node\n * @param {Parents} parent\n * @param {CollectionInfo} info\n * @returns {Array<BreakNumber | string>}\n */\nfunction renderedTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info)\n  }\n\n  if (node.type === 'text') {\n    return info.whitespace === 'normal'\n      ? collectText(node, info)\n      : collectPreText(node)\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parents} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<BreakNumber | string>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, info)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array<BreakNumber | string>} */\n  let items = []\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  /** @type {BreakNumber | undefined} */\n  let prefix\n  /** @type {BreakForce | BreakNumber | undefined} */\n  let suffix\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (\n    row(node) &&\n    // @ts-expect-error: something up with types of parents.\n    findAfter(parent, node, row)\n  ) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      renderedTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>\n  if (\n    cell(node) &&\n    // @ts-expect-error: something up with types of parents.\n    findAfter(parent, node, cell)\n  ) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Comment | Text} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<BreakNumber | string>}\n *   Result.\n */\nfunction collectText(node, info) {\n  const value = String(node.value)\n  /** @type {Array<string>} */\n  const lines = []\n  /** @type {Array<BreakNumber | string>} */\n  const result = []\n  let start = 0\n\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start\n\n    const match = searchLineFeeds.exec(value)\n    const end = match && 'index' in match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // […] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        start === 0 ? info.breakBefore : true,\n        end === value.length ? info.breakAfter : true\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  let index = -1\n  /** @type {BreakNumber | undefined} */\n  let join\n\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x20_0b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x20_0b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = undefined\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join)\n      result.push(lines[index])\n      join = 0\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0)\n    }\n  }\n\n  return result\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<BreakNumber | string>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)]\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  /** @type {number | undefined} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    const match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Nodes} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    const properties = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return properties.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return properties.noWrap ? 'nowrap' : info.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return info.whitespace\n}\n\n/**\n * @type {TestFunction}\n * @param {Element} node\n * @returns {node is {properties: {hidden: true}}}\n */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/**\n * @type {TestFunction}\n * @param {Element} node\n * @returns {node is {tagName: 'td' | 'th'}}\n */\nfunction isCell(node) {\n  return node.tagName === 'td' || node.tagName === 'th'\n}\n\n/**\n * @type {TestFunction}\n */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * @import {ElementContent, Element, Root} from 'hast'\n * @import {LanguageFn} from 'lowlight'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Readonly<Record<string, ReadonlyArray<string> | string>> | null | undefined} [aliases={}]\n *   Register more aliases (optional);\n *   passed to `lowlight.registerAlias`.\n * @property {boolean | null | undefined} [detect=false]\n *   Highlight code without language classes by guessing its programming\n *   language (default: `false`).\n * @property {Readonly<Record<string, LanguageFn>> | null | undefined} [languages]\n *   Register languages (default: `common`);\n *   passed to `lowlight.register`.\n * @property {ReadonlyArray<string> | null | undefined} [plainText=[]]\n *   List of language names to not highlight (optional);\n *   note you can also add `no-highlight` classes.\n * @property {string | null | undefined} [prefix='hljs-']\n *   Class prefix (default: `'hljs-'`).\n * @property {ReadonlyArray<string> | null | undefined} [subset]\n *   Names of languages to check when detecting (default: all registered\n *   languages).\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {common, createLowlight} from 'lowlight'\nimport {visit} from 'unist-util-visit'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Apply syntax highlighting.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeHighlight(options) {\n  const settings = options || emptyOptions\n  const aliases = settings.aliases\n  const detect = settings.detect || false\n  const languages = settings.languages || common\n  const plainText = settings.plainText\n  const prefix = settings.prefix\n  const subset = settings.subset\n  let name = 'hljs'\n\n  const lowlight = createLowlight(languages)\n\n  if (aliases) {\n    lowlight.registerAlias(aliases)\n  }\n\n  if (prefix) {\n    const pos = prefix.indexOf('-')\n    name = pos > -1 ? prefix.slice(0, pos) : prefix\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visit(tree, 'element', function (node, _, parent) {\n      if (\n        node.tagName !== 'code' ||\n        !parent ||\n        parent.type !== 'element' ||\n        parent.tagName !== 'pre'\n      ) {\n        return\n      }\n\n      const lang = language(node)\n\n      if (\n        lang === false ||\n        (!lang && !detect) ||\n        (lang && plainText && plainText.includes(lang))\n      ) {\n        return\n      }\n\n      if (!Array.isArray(node.properties.className)) {\n        node.properties.className = []\n      }\n\n      if (!node.properties.className.includes(name)) {\n        node.properties.className.unshift(name)\n      }\n\n      /** @type {Root} */\n      let result\n\n      try {\n        result = lang\n          ? lowlight.highlight(lang, toText(parent), {prefix})\n          : lowlight.highlightAuto(toText(parent), {prefix, subset})\n      } catch (error) {\n        const cause = /** @type {Error} */ (error)\n\n        if (lang && /Unknown language/.test(cause.message)) {\n          file.message(\n            'Cannot highlight as `' + lang + '`, it’s not registered',\n            {\n              ancestors: [parent, node],\n              cause,\n              place: node.position,\n              ruleId: 'missing-language',\n              source: 'rehype-highlight'\n            }\n          )\n\n          /* c8 ignore next 5 -- throw arbitrary hljs errors */\n          return\n        }\n\n        throw cause\n      }\n\n      if (!lang && result.data && result.data.language) {\n        node.properties.className.push('language-' + result.data.language)\n      }\n\n      if (result.children.length > 0) {\n        node.children = /** @type {Array<ElementContent>} */ (result.children)\n      }\n    })\n  }\n}\n\n/**\n * Get the programming language of `node`.\n *\n * @param {Element} node\n *   Node.\n * @returns {false | string | undefined}\n *   Language or `undefined`, or `false` when an explikcit `no-highlight` class\n *   is used.\n */\nfunction language(node) {\n  const list = node.properties.className\n  let index = -1\n\n  if (!Array.isArray(list)) {\n    return\n  }\n\n  /** @type {string | undefined} */\n  let name\n\n  while (++index < list.length) {\n    const value = String(list[index])\n\n    if (value === 'no-highlight' || value === 'nohighlight') {\n      return false\n    }\n\n    if (!name && value.slice(0, 5) === 'lang-') {\n      name = value.slice(5)\n    }\n\n    if (!name && value.slice(0, 9) === 'language-') {\n      name = value.slice(9)\n    }\n  }\n\n  return name\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isChild(properties)) {\n        children.unshift(properties)\n      } else {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @returns {value is Child}\n *   Whether `value` is definitely a child.\n */\nfunction isChild(value) {\n  // Never properties if not an object.\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\n    return true\n  }\n\n  // Never node without `type`; that’s the main discriminator.\n  if (typeof value.type !== 'string') return false\n\n  // Slower check: never property value if object or array with\n  // non-number/strings.\n  const record = /** @type {Record<string, unknown>} */ (value)\n  const keys = Object.keys(value)\n\n  for (const key of keys) {\n    const value = record[key]\n\n    if (value && typeof value === 'object') {\n      if (!Array.isArray(value)) return true\n\n      const list = /** @type {Array<unknown>} */ (value)\n\n      for (const item of list) {\n        if (typeof item !== 'number' && typeof item !== 'string') {\n          return true\n        }\n      }\n    }\n  }\n\n  // Also see empty `children` as a node.\n  if ('children' in value && Array.isArray(value.children)) {\n    return true\n  }\n\n  // Default to properties, someone can always pass an empty object,\n  // put `data: {}` in a node,\n  // or wrap it in an array.\n  return false\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @import {VFile, Value} from 'vfile'\n * @import {Location} from 'vfile-location'\n */\n\n/**\n * Create an index of the given document to translate between line/column and\n * offset based positional info.\n *\n * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /**\n   * List, where each index is a line number (0-based), and each value is the\n   * byte index *after* where the line ends.\n   *\n   * @type {Array<number>}\n   */\n  const indices = []\n\n  return {toOffset, toPoint}\n\n  /** @type {Location['toPoint']} */\n  function toPoint(offset) {\n    if (typeof offset === 'number' && offset > -1 && offset <= value.length) {\n      let index = 0\n\n      while (true) {\n        let end = indices[index]\n\n        if (end === undefined) {\n          const eol = next(value, indices[index - 1])\n          end = eol === -1 ? value.length + 1 : eol + 1\n          indices[index] = end\n        }\n\n        if (end > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n\n        index++\n      }\n    }\n  }\n\n  /** @type {Location['toOffset']} */\n  function toOffset(point) {\n    if (\n      point &&\n      typeof point.line === 'number' &&\n      typeof point.column === 'number' &&\n      !Number.isNaN(point.line) &&\n      !Number.isNaN(point.column)\n    ) {\n      while (indices.length < point.line) {\n        const from = indices[indices.length - 1]\n        const eol = next(value, from)\n        const end = eol === -1 ? value.length + 1 : eol + 1\n        if (from === end) break\n        indices.push(end)\n      }\n\n      const offset =\n        (point.line > 1 ? indices[point.line - 2] : 0) + point.column - 1\n      // The given `column` could not exist on this line.\n      if (offset < indices[point.line - 1]) return offset\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @param {number} from\n */\nfunction next(value, from) {\n  const cr = value.indexOf('\\r', from)\n  const lf = value.indexOf('\\n', from)\n  if (lf === -1) return cr\n  if (cr === -1 || cr + 1 === lf) return lf\n  return cr < lf ? cr : lf\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @import {ElementData, Element, Nodes, RootContent, Root} from 'hast'\n * @import {DefaultTreeAdapterMap, Token} from 'parse5'\n * @import {Schema} from 'property-information'\n * @import {Point, Position} from 'unist'\n * @import {VFile} from 'vfile'\n * @import {Options} from 'hast-util-from-parse5'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean} location\n *   Whether location info was found.\n * @property {Schema} schema\n *   Current schema.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n */\n\nimport {ok as assert} from 'devlop'\nimport {h, s} from 'hastscript'\nimport {find, html, svg} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n/** @type {unknown} */\n// type-coverage:ignore-next-line\nconst proto = Object.prototype\n\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {DefaultTreeAdapterMap['node']} tree\n *   `parse5` tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   hast tree.\n */\nexport function fromParse5(tree, options) {\n  const settings = options || {}\n\n  return one(\n    {\n      file: settings.file || undefined,\n      location: false,\n      schema: settings.space === 'svg' ? svg : html,\n      verbose: settings.verbose || false\n    },\n    tree\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} node\n *   p5 node.\n * @returns {Nodes}\n *   hast node.\n */\nfunction one(state, node) {\n  /** @type {Nodes} */\n  let result\n\n  switch (node.nodeName) {\n    case '#comment': {\n      const reference = /** @type {DefaultTreeAdapterMap['commentNode']} */ (\n        node\n      )\n      result = {type: 'comment', value: reference.data}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#document':\n    case '#document-fragment': {\n      const reference =\n        /** @type {DefaultTreeAdapterMap['document'] | DefaultTreeAdapterMap['documentFragment']} */ (\n          node\n        )\n      const quirksMode =\n        'mode' in reference\n          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'\n          : false\n\n      result = {\n        type: 'root',\n        children: all(state, node.childNodes),\n        data: {quirksMode}\n      }\n\n      if (state.file && state.location) {\n        const document = String(state.file)\n        const loc = location(document)\n        const start = loc.toPoint(0)\n        const end = loc.toPoint(document.length)\n        // Always defined as we give valid input.\n        assert(start, 'expected `start`')\n        assert(end, 'expected `end`')\n        result.position = {start, end}\n      }\n\n      return result\n    }\n\n    case '#documentType': {\n      const reference = /** @type {DefaultTreeAdapterMap['documentType']} */ (\n        node\n      )\n      result = {type: 'doctype'}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#text': {\n      const reference = /** @type {DefaultTreeAdapterMap['textNode']} */ (node)\n      result = {type: 'text', value: reference.value}\n      patch(state, reference, result)\n      return result\n    }\n\n    // Element.\n    default: {\n      const reference = /** @type {DefaultTreeAdapterMap['element']} */ (node)\n      result = element(state, reference)\n      return result\n    }\n  }\n}\n\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<DefaultTreeAdapterMap['node']>} nodes\n *   Nodes.\n * @returns {Array<RootContent>}\n *   hast nodes.\n */\nfunction all(state, nodes) {\n  let index = -1\n  /** @type {Array<RootContent>} */\n  const results = []\n\n  while (++index < nodes.length) {\n    // Assume no roots in `nodes`.\n    const result = /** @type {RootContent} */ (one(state, nodes[index]))\n    results.push(result)\n  }\n\n  return results\n}\n\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['element']} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */\nfunction element(state, node) {\n  const schema = state.schema\n\n  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html\n\n  // Props.\n  let index = -1\n  /** @type {Record<string, string>} */\n  const properties = {}\n\n  while (++index < node.attrs.length) {\n    const attribute = node.attrs[index]\n    const name =\n      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name\n    if (!own.call(proto, name)) {\n      properties[name] = attribute.value\n    }\n  }\n\n  // Build.\n  const x = state.schema.space === 'svg' ? s : h\n  const result = x(node.tagName, properties, all(state, node.childNodes))\n  patch(state, node, result)\n\n  // Switch content.\n  if (result.tagName === 'template') {\n    const reference = /** @type {DefaultTreeAdapterMap['template']} */ (node)\n    const pos = reference.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    // Root in, root out.\n    const content = /** @type {Root} */ (one(state, reference.content))\n\n    if (startTag && endTag && state.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  state.schema = schema\n\n  return result\n}\n\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} from\n *   p5 node.\n * @param {Nodes} to\n *   hast node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(state, from, to) {\n  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {\n    const position = createLocation(state, to, from.sourceCodeLocation)\n\n    if (position) {\n      state.location = true\n      to.position = position\n    }\n  }\n}\n\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   hast node.\n * @param {Token.ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */\nfunction createLocation(state, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (state.verbose) {\n      /** @type {Record<string, Position | undefined>} */\n      const properties = {}\n      /** @type {string} */\n      let key\n\n      if (location.attrs) {\n        for (key in location.attrs) {\n          if (own.call(location.attrs, key)) {\n            properties[find(state.schema, key).property] = position(\n              location.attrs[key]\n            )\n          }\n        }\n      }\n\n      assert(location.startTag, 'a start tag should exist')\n      const opening = position(location.startTag)\n      const closing = location.endTag ? position(location.endTag) : undefined\n      /** @type {ElementData['position']} */\n      const data = {opening}\n      if (closing) data.closing = closing\n      data.properties = properties\n\n      node.data = {position: data}\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a p5 location into a position.\n *\n * @param {Token.Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n\n  // @ts-expect-error: we do use `undefined` for points if one or the other\n  // exists.\n  return start || end ? {start, end} : undefined\n}\n\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */\nfunction point(point) {\n  return point.line && point.column ? point : undefined\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment\n * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element\n * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype\n * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment\n * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text\n * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent\n * @typedef {import('parse5').Token.Attribute} Parse5Attribute\n *\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n *\n * @typedef {Exclude<Parse5Nodes, Parse5Document | Parse5Fragment>} Parse5Content\n *\n * @typedef {'html' | 'svg'} Space\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {find, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\nconst own = {}.hasOwnProperty\n\nconst one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a hast tree to a `parse5` AST.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Parse5Nodes}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  const settings = options || emptyOptions\n  const space = settings.space\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Document}\n *   Parse5 node.\n */\nfunction root(node, schema) {\n  /** @type {Parse5Document} */\n  const result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Fragment}\n *   Parse5 node.\n */\nfunction fragment(node, schema) {\n  /** @type {Parse5Fragment} */\n  const result = {nodeName: '#document-fragment', childNodes: []}\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Doctype} node\n *   Node (hast) to transform.\n * @returns {Parse5Doctype}\n *   Parse5 node.\n */\nfunction doctype(node) {\n  /** @type {Parse5Doctype} */\n  const result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: null\n  }\n\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Text} node\n *   Node (hast) to transform.\n * @returns {Parse5Text}\n *   Parse5 node.\n */\nfunction text(node) {\n  /** @type {Parse5Text} */\n  const result = {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: null\n  }\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Comment} node\n *   Node (hast) to transform.\n * @returns {Parse5Comment}\n *   Parse5 node.\n */\nfunction comment(node) {\n  /** @type {Parse5Comment} */\n  const result = {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: null\n  }\n\n  patch(node, result)\n\n  return result\n}\n\n/**\n * @param {Element} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Element}\n *   Parse5 node.\n */\nfunction element(node, schema) {\n  const parentSchema = schema\n  let currentSchema = parentSchema\n\n  if (\n    node.type === 'element' &&\n    node.tagName.toLowerCase() === 'svg' &&\n    parentSchema.space === 'html'\n  ) {\n    currentSchema = svg\n  }\n\n  /** @type {Array<Parse5Attribute>} */\n  const attrs = []\n  /** @type {string} */\n  let prop\n\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          currentSchema,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          attrs.push(result)\n        }\n      }\n    }\n  }\n\n  const space = currentSchema.space\n  // `html` and `svg` both have a space.\n  assert(space)\n\n  /** @type {Parse5Element} */\n  const result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs,\n    // @ts-expect-error: `parse5` types are wrong.\n    namespaceURI: webNamespaces[space],\n    childNodes: [],\n    parentNode: null\n  }\n  result.childNodes = all(node.children, result, currentSchema)\n  patch(node, result)\n\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema)\n  }\n\n  return result\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Parse5Attribute | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  const info = find(schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === false ||\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value)) ||\n    (!value && info.boolean)\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  /** @type {Parse5Attribute} */\n  const attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  }\n\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    const index = attribute.name.indexOf(':')\n\n    if (index < 0) {\n      attribute.prefix = ''\n    } else {\n      attribute.name = attribute.name.slice(index + 1)\n      attribute.prefix = info.attribute.slice(0, index)\n    }\n\n    attribute.namespace = webNamespaces[info.space]\n  }\n\n  return attribute\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<RootContent>} children\n *   List of children.\n * @param {Parse5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<Parse5Content>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  let index = -1\n  /** @type {Array<Parse5Content>} */\n  const results = []\n\n  if (children) {\n    while (++index < children.length) {\n      /** @type {Parse5Content} */\n      const child = one(children[index], schema)\n\n      child.parentNode = parentNode\n\n      results.push(child)\n    }\n  }\n\n  return results\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Nodes} from\n *   hast node.\n * @param {Parse5Nodes} to\n *   `parse5` node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const position = from.position\n\n  if (position && position.start && position.end) {\n    assert(typeof position.start.offset === 'number')\n    assert(typeof position.end.offset === 'number')\n\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","const UNDEFINED_CODE_POINTS = new Set([\n    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,\n    393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,\n    720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,\n    1048575, 1114110, 1114111,\n]);\nexport const REPLACEMENT_CHARACTER = '\\uFFFD';\nexport var CODE_POINTS;\n(function (CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n})(CODE_POINTS || (CODE_POINTS = {}));\nexport const SEQUENCES = {\n    DASH_DASH: '--',\n    CDATA_START: '[CDATA[',\n    DOCTYPE: 'doctype',\n    SCRIPT: 'script',\n    PUBLIC: 'public',\n    SYSTEM: 'system',\n};\n//Surrogates\nexport function isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexport function isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexport function getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\n//NOTE: excluding NULL and ASCII whitespace\nexport function isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nexport function isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n","export var ERR;\n(function (ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR || (ERR = {}));\n","import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint, } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js';\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nexport class Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code, cpOffset) {\n        const { line, col, offset } = this;\n        const startCol = col + cpOffset;\n        const startOffset = offset + cpOffset;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol,\n            endCol: startCol,\n            startOffset,\n            endOffset: startOffset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code, 0));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if (isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === $.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === $.LINE_FEED ||\n            cp === $.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if (isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        }\n        else if (isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\n","export var TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType || (TokenType = {}));\nexport function getTokenAttr(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\n",null,null,null,null,"/** All valid namespaces in HTML. */\nexport var NS;\n(function (NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS || (NS = {}));\nexport var ATTRS;\n(function (ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS || (ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */\nexport var DOCUMENT_MODE;\n(function (DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE || (DOCUMENT_MODE = {}));\nexport var TAG_NAMES;\n(function (TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SEARCH\"] = \"search\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES || (TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */\nexport var TAG_ID;\n(function (TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SEARCH\"] = 94] = \"SEARCH\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 95] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 96] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 97] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 98] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 99] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 100] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 101] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 102] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 103] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 104] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 105] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 106] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 107] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 108] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 109] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 110] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 111] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 112] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 113] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 114] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 115] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 116] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 117] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 118] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 119] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 120] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 121] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 122] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 123] = \"XMP\";\n})(TAG_ID || (TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [TAG_NAMES.A, TAG_ID.A],\n    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],\n    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],\n    [TAG_NAMES.APPLET, TAG_ID.APPLET],\n    [TAG_NAMES.AREA, TAG_ID.AREA],\n    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],\n    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],\n    [TAG_NAMES.B, TAG_ID.B],\n    [TAG_NAMES.BASE, TAG_ID.BASE],\n    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],\n    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],\n    [TAG_NAMES.BIG, TAG_ID.BIG],\n    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],\n    [TAG_NAMES.BODY, TAG_ID.BODY],\n    [TAG_NAMES.BR, TAG_ID.BR],\n    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],\n    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],\n    [TAG_NAMES.CENTER, TAG_ID.CENTER],\n    [TAG_NAMES.CODE, TAG_ID.CODE],\n    [TAG_NAMES.COL, TAG_ID.COL],\n    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],\n    [TAG_NAMES.DD, TAG_ID.DD],\n    [TAG_NAMES.DESC, TAG_ID.DESC],\n    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],\n    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],\n    [TAG_NAMES.DIR, TAG_ID.DIR],\n    [TAG_NAMES.DIV, TAG_ID.DIV],\n    [TAG_NAMES.DL, TAG_ID.DL],\n    [TAG_NAMES.DT, TAG_ID.DT],\n    [TAG_NAMES.EM, TAG_ID.EM],\n    [TAG_NAMES.EMBED, TAG_ID.EMBED],\n    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],\n    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],\n    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],\n    [TAG_NAMES.FONT, TAG_ID.FONT],\n    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],\n    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],\n    [TAG_NAMES.FORM, TAG_ID.FORM],\n    [TAG_NAMES.FRAME, TAG_ID.FRAME],\n    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],\n    [TAG_NAMES.H1, TAG_ID.H1],\n    [TAG_NAMES.H2, TAG_ID.H2],\n    [TAG_NAMES.H3, TAG_ID.H3],\n    [TAG_NAMES.H4, TAG_ID.H4],\n    [TAG_NAMES.H5, TAG_ID.H5],\n    [TAG_NAMES.H6, TAG_ID.H6],\n    [TAG_NAMES.HEAD, TAG_ID.HEAD],\n    [TAG_NAMES.HEADER, TAG_ID.HEADER],\n    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],\n    [TAG_NAMES.HR, TAG_ID.HR],\n    [TAG_NAMES.HTML, TAG_ID.HTML],\n    [TAG_NAMES.I, TAG_ID.I],\n    [TAG_NAMES.IMG, TAG_ID.IMG],\n    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],\n    [TAG_NAMES.INPUT, TAG_ID.INPUT],\n    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],\n    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],\n    [TAG_NAMES.LABEL, TAG_ID.LABEL],\n    [TAG_NAMES.LI, TAG_ID.LI],\n    [TAG_NAMES.LINK, TAG_ID.LINK],\n    [TAG_NAMES.LISTING, TAG_ID.LISTING],\n    [TAG_NAMES.MAIN, TAG_ID.MAIN],\n    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],\n    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],\n    [TAG_NAMES.MATH, TAG_ID.MATH],\n    [TAG_NAMES.MENU, TAG_ID.MENU],\n    [TAG_NAMES.META, TAG_ID.META],\n    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],\n    [TAG_NAMES.MI, TAG_ID.MI],\n    [TAG_NAMES.MO, TAG_ID.MO],\n    [TAG_NAMES.MN, TAG_ID.MN],\n    [TAG_NAMES.MS, TAG_ID.MS],\n    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],\n    [TAG_NAMES.NAV, TAG_ID.NAV],\n    [TAG_NAMES.NOBR, TAG_ID.NOBR],\n    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],\n    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],\n    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],\n    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],\n    [TAG_NAMES.OL, TAG_ID.OL],\n    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],\n    [TAG_NAMES.OPTION, TAG_ID.OPTION],\n    [TAG_NAMES.P, TAG_ID.P],\n    [TAG_NAMES.PARAM, TAG_ID.PARAM],\n    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],\n    [TAG_NAMES.PRE, TAG_ID.PRE],\n    [TAG_NAMES.RB, TAG_ID.RB],\n    [TAG_NAMES.RP, TAG_ID.RP],\n    [TAG_NAMES.RT, TAG_ID.RT],\n    [TAG_NAMES.RTC, TAG_ID.RTC],\n    [TAG_NAMES.RUBY, TAG_ID.RUBY],\n    [TAG_NAMES.S, TAG_ID.S],\n    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],\n    [TAG_NAMES.SEARCH, TAG_ID.SEARCH],\n    [TAG_NAMES.SECTION, TAG_ID.SECTION],\n    [TAG_NAMES.SELECT, TAG_ID.SELECT],\n    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],\n    [TAG_NAMES.SMALL, TAG_ID.SMALL],\n    [TAG_NAMES.SPAN, TAG_ID.SPAN],\n    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],\n    [TAG_NAMES.STRONG, TAG_ID.STRONG],\n    [TAG_NAMES.STYLE, TAG_ID.STYLE],\n    [TAG_NAMES.SUB, TAG_ID.SUB],\n    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],\n    [TAG_NAMES.SUP, TAG_ID.SUP],\n    [TAG_NAMES.TABLE, TAG_ID.TABLE],\n    [TAG_NAMES.TBODY, TAG_ID.TBODY],\n    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],\n    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],\n    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],\n    [TAG_NAMES.TD, TAG_ID.TD],\n    [TAG_NAMES.TH, TAG_ID.TH],\n    [TAG_NAMES.THEAD, TAG_ID.THEAD],\n    [TAG_NAMES.TITLE, TAG_ID.TITLE],\n    [TAG_NAMES.TR, TAG_ID.TR],\n    [TAG_NAMES.TRACK, TAG_ID.TRACK],\n    [TAG_NAMES.TT, TAG_ID.TT],\n    [TAG_NAMES.U, TAG_ID.U],\n    [TAG_NAMES.UL, TAG_ID.UL],\n    [TAG_NAMES.SVG, TAG_ID.SVG],\n    [TAG_NAMES.VAR, TAG_ID.VAR],\n    [TAG_NAMES.WBR, TAG_ID.WBR],\n    [TAG_NAMES.XMP, TAG_ID.XMP],\n]);\nexport function getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nexport const SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP,\n    ]),\n    [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),\n    [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set(),\n};\nexport const NUMBERED_HEADERS = new Set([$.H1, $.H2, $.H3, $.H4, $.H5, $.H6]);\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT,\n]);\nexport function hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || (scriptingEnabled && tn === TAG_NAMES.NOSCRIPT);\n}\n","import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === $.NULL) {\n        return ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if (isSurrogate(code)) {\n        return ERR.surrogateCharacterReference;\n    }\n    else if (isUndefinedCodePoint(code)) {\n        return ERR.noncharacterCharacterReference;\n    }\n    else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n        return ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\n","import { TAG_ID as $, NS, NUMBERED_HEADERS } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    $.CAPTION,\n    $.COLGROUP,\n    $.TBODY,\n    $.TD,\n    $.TFOOT,\n    $.TH,\n    $.THEAD,\n    $.TR,\n]);\nconst SCOPING_ELEMENTS_HTML = new Set([\n    $.APPLET,\n    $.CAPTION,\n    $.HTML,\n    $.MARQUEE,\n    $.OBJECT,\n    $.TABLE,\n    $.TD,\n    $.TEMPLATE,\n    $.TH,\n]);\nconst SCOPING_ELEMENTS_HTML_LIST = new Set([...SCOPING_ELEMENTS_HTML, $.OL, $.UL]);\nconst SCOPING_ELEMENTS_HTML_BUTTON = new Set([...SCOPING_ELEMENTS_HTML, $.BUTTON]);\nconst SCOPING_ELEMENTS_MATHML = new Set([$.ANNOTATION_XML, $.MI, $.MN, $.MO, $.MS, $.MTEXT]);\nconst SCOPING_ELEMENTS_SVG = new Set([$.DESC, $.FOREIGN_OBJECT, $.TITLE]);\nconst TABLE_ROW_CONTEXT = new Set([$.TR, $.TEMPLATE, $.HTML]);\nconst TABLE_BODY_CONTEXT = new Set([$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML]);\nconst TABLE_CONTEXT = new Set([$.TABLE, $.TEMPLATE, $.HTML]);\nconst TABLE_CELLS = new Set([$.TD, $.TH]);\n//Stack of open elements\nexport class OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler) {\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = $.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);\n    }\n    shortenToLength(idx) {\n        while (this.stackTop >= idx) {\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            }\n            else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n    }\n    //Element in scope\n    hasInDynamicScope(tagName, htmlScope) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (tn === tagName)\n                        return true;\n                    if (htmlScope.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);\n    }\n    hasInListItemScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);\n    }\n    hasInButtonScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);\n    }\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (NUMBERED_HEADERS.has(tn))\n                        return true;\n                    if (SCOPING_ELEMENTS_HTML.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.OPTION:\n                case $.OPTGROUP: {\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n}\n","//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n","import { DOCUMENT_MODE } from '../common/html.js';\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    createTextNode(value) {\n        return {\n            nodeName: '#text',\n            value,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, defaultTreeAdapter.createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, defaultTreeAdapter.createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n","import { DOCUMENT_MODE } from './html.js';\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//',\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    '-//w3o//dtd w3 html strict 3.0//en//',\n    '-/w3c/dtd html 4.0 transitional/en',\n    'html',\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix) => publicId.startsWith(prefix));\n}\n//API\nexport function isConforming(token) {\n    return (token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID));\n}\nexport function getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return DOCUMENT_MODE.NO_QUIRKS;\n}\n","import { TAG_ID as $, NS, ATTRS, getTagID } from './html.js';\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml',\n};\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    'attributeName',\n    'attributeType',\n    'baseFrequency',\n    'baseProfile',\n    'calcMode',\n    'clipPathUnits',\n    'diffuseConstant',\n    'edgeMode',\n    'filterUnits',\n    'glyphRef',\n    'gradientTransform',\n    'gradientUnits',\n    'kernelMatrix',\n    'kernelUnitLength',\n    'keyPoints',\n    'keySplines',\n    'keyTimes',\n    'lengthAdjust',\n    'limitingConeAngle',\n    'markerHeight',\n    'markerUnits',\n    'markerWidth',\n    'maskContentUnits',\n    'maskUnits',\n    'numOctaves',\n    'pathLength',\n    'patternContentUnits',\n    'patternTransform',\n    'patternUnits',\n    'pointsAtX',\n    'pointsAtY',\n    'pointsAtZ',\n    'preserveAlpha',\n    'preserveAspectRatio',\n    'primitiveUnits',\n    'refX',\n    'refY',\n    'repeatCount',\n    'repeatDur',\n    'requiredExtensions',\n    'requiredFeatures',\n    'specularConstant',\n    'specularExponent',\n    'spreadMethod',\n    'startOffset',\n    'stdDeviation',\n    'stitchTiles',\n    'surfaceScale',\n    'systemLanguage',\n    'tableValues',\n    'targetX',\n    'targetY',\n    'textLength',\n    'viewBox',\n    'viewTarget',\n    'xChannelSelector',\n    'yChannelSelector',\n    'zoomAndPan',\n].map((attr) => [attr.toLowerCase(), attr]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],\n    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],\n    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],\n    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],\n    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],\n    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],\n    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],\n    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],\n    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],\n    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],\n    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],\n]);\n//SVG tag names adjustment map\nexport const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    'altGlyph',\n    'altGlyphDef',\n    'altGlyphItem',\n    'animateColor',\n    'animateMotion',\n    'animateTransform',\n    'clipPath',\n    'feBlend',\n    'feColorMatrix',\n    'feComponentTransfer',\n    'feComposite',\n    'feConvolveMatrix',\n    'feDiffuseLighting',\n    'feDisplacementMap',\n    'feDistantLight',\n    'feFlood',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feImage',\n    'feMerge',\n    'feMergeNode',\n    'feMorphology',\n    'feOffset',\n    'fePointLight',\n    'feSpecularLighting',\n    'feSpotLight',\n    'feTile',\n    'feTurbulence',\n    'foreignObject',\n    'glyphRef',\n    'linearGradient',\n    'radialGradient',\n    'textPath',\n].map((tn) => [tn.toLowerCase(), tn]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    $.B,\n    $.BIG,\n    $.BLOCKQUOTE,\n    $.BODY,\n    $.BR,\n    $.CENTER,\n    $.CODE,\n    $.DD,\n    $.DIV,\n    $.DL,\n    $.DT,\n    $.EM,\n    $.EMBED,\n    $.H1,\n    $.H2,\n    $.H3,\n    $.H4,\n    $.H5,\n    $.H6,\n    $.HEAD,\n    $.HR,\n    $.I,\n    $.IMG,\n    $.LI,\n    $.LISTING,\n    $.MENU,\n    $.META,\n    $.NOBR,\n    $.OL,\n    $.P,\n    $.PRE,\n    $.RUBY,\n    $.S,\n    $.SMALL,\n    $.SPAN,\n    $.STRONG,\n    $.STRIKE,\n    $.SUB,\n    $.SUP,\n    $.TABLE,\n    $.TT,\n    $.U,\n    $.UL,\n    $.VAR,\n]);\n//Check exit from foreign content\nexport function causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === $.FONT &&\n        startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\n//Token adjustments\nexport function adjustTokenMathMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexport function adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexport function adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexport function adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n    }\n}\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\nexport function isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||\n        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));\n}\n","import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, NUMBERED_HEADERS, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, \n    /** @internal */\n    fragmentContext = null, \n    /** @internal */\n    scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        /** @internal */\n        this.insertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.headElement = null;\n        /** @internal */\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         *\n         * @internal\n         */\n        this.tmplInsertionModeStack = [];\n        /** @internal */\n        this.pendingCharacterTokens = [];\n        /** @internal */\n        this.hasNonWhitespacePendingCharacterToken = false;\n        /** @internal */\n        this.framesetOk = true;\n        /** @internal */\n        this.skipNextNewLine = false;\n        /** @internal */\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    /** @internal */\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    /** @internal */\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    /** @internal */\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    /** @protected */\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    /** @protected */\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    /** @protected */\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    /** @protected */\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    /** @protected */\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    /**\n     * For self-closing tags. Add an element to the tree, but skip adding it\n     * to the stack.\n     */\n    /** @protected */\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    /** @protected */\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    /** @protected */\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    /** @protected */\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    /** @protected */\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    /** @protected */\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    /** @protected */\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    /** @protected */\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    /** @protected */\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    /** @protected */\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    /** @protected */\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    /** @protected */\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    /** @protected */\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    /** @protected */\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    /** @protected */\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    /** @protected */\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    /** @protected */\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    /** @protected */\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    /** @protected */\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    /** @protected */\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    /** @protected */\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    /** @internal */\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     * @protected\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (NUMBERED_HEADERS.has(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as a user agent with enabled plugins/frames, so we parse\n//<noembed>/<noframes> as rawtext.\nfunction rawTextStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED:\n        case $.NOFRAMES: {\n            rawTextStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                rawTextStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.HR: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n",null,"import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (attr.namespace) {\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        }\n        else {\n            html += attr.name;\n        }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n","/**\n * @import {Options} from 'hast-util-raw'\n * @import {Comment, Doctype, Element, Nodes, RootContent, Root, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {DefaultTreeAdapterMap, ParserOptions} from 'parse5'\n * @import {Point} from 'unist'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n */\n\n/**\n * @typedef Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that we’ll swap back in afterwards.\n * @property {'comment'} type\n *   Node type.\n * @property {{stitch: Nodes}} value\n *   Replacement value.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {toParse5} from 'hast-util-to-parse5'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {Parser, Token, TokenizerMode, html} from 'parse5'\nimport {pointEnd, pointStart} from 'unist-util-position'\nimport {visit} from 'unist-util-visit'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\nconst gfmTagfilterExpression =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n\n/** @type {ParserOptions<DefaultTreeAdapterMap>} */\nconst parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false}\n\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */\nexport function raw(tree, options) {\n  const document = documentMode(tree)\n  /** @type {(node: Nodes, state: State) => undefined} */\n  const one = zwitch('type', {\n    handlers: {root, element, text, comment, doctype, raw: handleRaw},\n    unknown\n  })\n\n  /** @type {State} */\n  const state = {\n    parser: document\n      ? new Parser(parseOptions)\n      : Parser.getFragmentParser(undefined, parseOptions),\n    handle(node) {\n      one(node, state)\n    },\n    stitches: false,\n    options: options || {}\n  }\n\n  one(tree, state)\n  resetTokenizer(state, pointStart())\n\n  const p5 = document ? state.parser.document : state.parser.getFragment()\n  const result = fromParse5(p5, {\n    // To do: support `space`?\n    file: state.options.file\n  })\n\n  if (state.stitches) {\n    visit(result, 'comment', function (node, index, parent) {\n      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node))\n      if (stitch.value.stitch && parent && index !== undefined) {\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        // @ts-expect-error: assume the stitch is allowed.\n        siblings[index] = stitch.value.stitch\n        return index\n      }\n    })\n  }\n\n  // Unpack if possible and when not given a `root`.\n  if (\n    result.type === 'root' &&\n    result.children.length === 1 &&\n    result.children[0].type === tree.type\n  ) {\n    return result.children[0]\n  }\n\n  return result\n}\n\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction all(nodes, state) {\n  let index = -1\n\n  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */\n  if (nodes) {\n    while (++index < nodes.length) {\n      state.handle(nodes[index])\n    }\n  }\n}\n\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction root(node, state) {\n  all(node.children, state)\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction element(node, state) {\n  startTag(node, state)\n\n  all(node.children, state)\n\n  endTag(node, state)\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction text(node, state) {\n  // Allow `DATA` through `PLAINTEXT`,\n  // but when hanging in a tag for example,\n  // switch back to `DATA`.\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  if (state.parser.tokenizer.state > 4) {\n    state.parser.tokenizer.state = 0\n  }\n\n  /** @type {Token.CharacterToken} */\n  const token = {\n    type: Token.TokenType.CHARACTER,\n    chars: node.value,\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction doctype(node, state) {\n  /** @type {Token.DoctypeToken} */\n  const token = {\n    type: Token.TokenType.DOCTYPE,\n    name: 'html',\n    forceQuirks: false,\n    publicId: '',\n    systemId: '',\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction stitch(node, state) {\n  // Mark that there are stitches, so we need to walk the tree and revert them.\n  state.stitches = true\n\n  /** @type {Nodes} */\n  const clone = cloneWithoutChildren(node)\n\n  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n  // passed through node).\n  if ('children' in node && 'children' in clone) {\n    // Root in root out.\n    const fakeRoot = /** @type {Root} */ (\n      raw({type: 'root', children: node.children}, state.options)\n    )\n    clone.children = fakeRoot.children\n  }\n\n  // Hack: `value` is supposed to be a string, but as none of the tools\n  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n  // through.\n  comment({type: 'comment', value: {stitch: clone}}, state)\n}\n\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction comment(node, state) {\n  /** @type {string} */\n  // @ts-expect-error: we pass stitches through.\n  const data = node.value\n\n  /** @type {Token.CommentToken} */\n  const token = {\n    type: Token.TokenType.COMMENT,\n    data,\n    location: createParse5Location(node)\n  }\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction handleRaw(node, state) {\n  // Reset preprocessor:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n  state.parser.tokenizer.preprocessor.html = ''\n  state.parser.tokenizer.preprocessor.pos = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastGapPos = -2\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.gapStack = []\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.skipNextNewLine = false\n  state.parser.tokenizer.preprocessor.lastChunkWritten = false\n  state.parser.tokenizer.preprocessor.endOfChunkHit = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.isEol = false\n\n  // Now pass `node.value`.\n  setPoint(state, pointStart(node))\n\n  state.parser.tokenizer.write(\n    state.options.tagfilter\n      ? node.value.replace(gfmTagfilterExpression, '&lt;$1$2')\n      : node.value,\n    false\n  )\n  // @ts-expect-error: private.\n  state.parser.tokenizer._runParsingLoop()\n\n  // Character references hang, so if we ended there, we need to flush\n  // those too.\n  // We reset the preprocessor as if the document ends here.\n  // Then one single call to the relevant state does the trick, parse5\n  // consumes the whole token.\n\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  // Note: a change to `parse5`, which breaks this, was merged but not released.\n  // Investigate when it is.\n  // To do: remove next major.\n  /* c8 ignore next 12 -- removed in <https://github.com/inikulin/parse5/pull/897> */\n  if (\n    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||\n    // @ts-expect-error: removed.\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */\n  ) {\n    state.parser.tokenizer.preprocessor.lastChunkWritten = true\n    /** @type {number} */\n    // @ts-expect-error: private.\n    const cp = state.parser.tokenizer._consume()\n    // @ts-expect-error: private.\n    state.parser.tokenizer._callState(cp)\n  }\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */\nfunction unknown(node_, state) {\n  const node = /** @type {Nodes} */ (node_)\n\n  if (\n    state.options.passThrough &&\n    state.options.passThrough.includes(node.type)\n  ) {\n    stitch(node, state)\n  } else {\n    let extra = ''\n\n    if (knownMdxNames.has(node.type)) {\n      extra =\n        \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\"\n    }\n\n    throw new Error('Cannot compile `' + node.type + '` node' + extra)\n  }\n}\n\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction resetTokenizer(state, point) {\n  setPoint(state, point)\n\n  // Process final characters if they’re still there after hibernating.\n  /** @type {Token.CharacterToken} */\n  // @ts-expect-error: private.\n  const token = state.parser.tokenizer.currentCharacterToken\n\n  if (token && token.location) {\n    token.location.endLine = state.parser.tokenizer.preprocessor.line\n    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1\n    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1\n    // @ts-expect-error: private.\n    state.parser.currentToken = token\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken)\n  }\n\n  // Reset tokenizer:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n  // Especially putting it back in the `data` state is useful: some elements,\n  // like textareas and iframes, change the state.\n  // See GH-7.\n  // But also if broken HTML is in `raw`, and then a correct element is given.\n  // See GH-11.\n  // @ts-expect-error: private.\n  state.parser.tokenizer.paused = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.inLoop = false\n\n  // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n  // manually update those when needed.\n  state.parser.tokenizer.active = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.returnState = TokenizerMode.DATA\n  // @ts-expect-error: private.\n  state.parser.tokenizer.charRefCode = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.consumedAfterSnapshot = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentLocation = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentCharacterToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentAttr = {name: '', value: ''}\n}\n\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction setPoint(state, point) {\n  if (point && point.offset !== undefined) {\n    /** @type {Token.Location} */\n    const location = {\n      startLine: point.line,\n      startCol: point.column,\n      startOffset: point.offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    }\n\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset\n    state.parser.tokenizer.preprocessor.line = point.line\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentLocation = location\n  }\n}\n\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction startTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointStart(node))\n\n  const current = state.parser.openElements.current\n  let ns = 'namespaceURI' in current ? current.namespaceURI : webNamespaces.html\n\n  if (ns === webNamespaces.html && tagName === 'svg') {\n    ns = webNamespaces.svg\n  }\n\n  const result = toParse5(\n    // Shallow clone to not delve into `children`: we only need the attributes.\n    {...node, children: []},\n    {space: ns === webNamespaces.svg ? 'svg' : 'html'}\n  )\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.START_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    // We always send start and end tags.\n    selfClosing: false,\n    ackSelfClosing: false,\n    // Always element.\n    /* c8 ignore next */\n    attrs: 'attrs' in result ? result.attrs : [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Set a tag name, similar to how the tokenizer would do it.\n  state.parser.tokenizer.lastStartTagName = tagName\n\n  // `inForeignNode` is correctly set by the parser.\n}\n\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction endTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n  // Do not emit closing tags for HTML void elements.\n  if (\n    !state.parser.tokenizer.inForeignNode &&\n    htmlVoidElements.includes(tagName)\n  ) {\n    return\n  }\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointEnd(node))\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.END_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs: [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Switch back to the data state after alternative states that don’t accept\n  // tags:\n  if (\n    // Current element is closed.\n    tagName === state.parser.tokenizer.lastStartTagName &&\n    // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === TokenizerMode.RCDATA ||\n      // `<iframe>`, `<noembed>`, `<noframes>`, `<style>`, `<xmp>`\n      state.parser.tokenizer.state === TokenizerMode.RAWTEXT ||\n      // `<script>`\n      state.parser.tokenizer.state === TokenizerMode.SCRIPT_DATA)\n    // Note: `<plaintext>` not needed, as it’s the last element.\n  ) {\n    state.parser.tokenizer.state = TokenizerMode.DATA\n  }\n}\n\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */\nfunction documentMode(node) {\n  const head = node.type === 'root' ? node.children[0] : node\n  return Boolean(\n    head &&\n      (head.type === 'doctype' ||\n        (head.type === 'element' && head.tagName.toLowerCase() === 'html'))\n  )\n}\n\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Token.Location}\n *   `parse5` location.\n */\nfunction createParse5Location(node) {\n  const start = pointStart(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n  const end = pointEnd(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n\n  /** @type {Record<keyof Token.Location, number | undefined>} */\n  const location = {\n    startLine: start.line,\n    startCol: start.column,\n    startOffset: start.offset,\n    endLine: end.line,\n    endCol: end.column,\n    endOffset: end.offset\n  }\n\n  // @ts-expect-error: unist point values can be `undefined` in hast, which\n  // `parse5` types don’t want.\n  return location\n}\n\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return 'children' in node\n    ? structuredClone({...node, children: []})\n    : structuredClone(node)\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} RawOptions\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<RawOptions, 'file'>} Options\n *   Configuration.\n */\n\nimport {raw} from 'hast-util-raw'\n\n/**\n * Parse the tree (and raw nodes) again, keeping positional info okay.\n *\n * @param {Options | null | undefined}  [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeRaw(options) {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {Root}\n   *   New tree.\n   */\n  return function (tree, file) {\n    // Assume root in -> root out.\n    const result = /** @type {Root} */ (raw(tree, {...options, file}))\n    return result\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","__importDefault","require","repeat","character","count","join","blockElements","isBlock","is","voidElements","isVoid","meaningfulWhenBlankElements","tagNames","indexOf","nodeName","has","getElementsByTagName","some","tagName","cleanAttribute","attribute","Rules","_keep","_remove","blankRule","replacement","blankReplacement","keepReplacement","defaultRule","defaultReplacement","array","findRule","rule","filterValue","filter","toLowerCase","remove","next","nextSibling","parentNode","removeChild","prev","current","isPre","firstChild","paragraph","lineBreak","br","heading","hLevel","Number","headingStyle","blockquote","list","parent","lastElementChild","listItem","prefix","bulletListMarker","getAttribute","index","children","test","indentedCodeBlock","codeBlockStyle","textContent","fencedCodeBlock","language","code","fenceChar","fence","fenceSize","fenceInCodeRegex","RegExp","horizontalRule","hr","inlineLink","linkStyle","href","title","referenceLink","reference","linkReferenceStyle","id","references","append","emphasis","emDelimiter","strong","strongDelimiter","hasSiblings","previousSibling","isCodeBlock","extraSpace","delimiter","matches","image","alt","add","unshift","keep","forNode","isBlank","fn","root","window","_htmlParser","HTMLParser","Parser","DOMParser","canParse","parseFromString","e","canParseHTMLNatively","useActiveX","document","implementation","createHTMLDocument","open","ActiveXObject","shouldUseActiveX","string","doc","write","close","designMode","createHTMLParser","RootNode","input","getElementById","cloneNode","element","prevText","keepLeadingWs","nodeType","text","data","substr","nextNode","collapseWhitespace","preformattedCode","isPreOrCode","Node","isCode","isMeaningfulWhenBlank","hasVoid","hasMeaningfulWhenBlank","flankingWhitespace","leading","trailing","edges","leadingAscii","leadingNonAscii","trailingNonAscii","trailingAscii","edgeWhitespace","isFlankedByWhitespace","side","sibling","regExp","isFlanked","nodeValue","reduce","escapes","TurndownService","defaults","outerHTML","destination","process","self","childNodes","output","escape","replacementForNode","postProcess","s1","indexEnd","substring","trimTrailingNewlines","s2","nls","Math","max","turndown","canConvert","use","plugin","addRule","accumulator","env","globalThis","deserialize","serialized","deserializer","$","_","as","out","set","unpair","get","object","Date","flags","map","Map","Set","message","BigInt","EMPTY","keys","typeOf","asString","includes","shouldSkip","_ref","TYPE","serialize","json","lossy","undefined","serializer","strict","pair","entry","valueOf","toJSON","entries","toISOString","structuredClone","any","parse","tokens","String","token","stringify","values","settings","padRight","padLeft","emptyOptions","one","includeImageAlt","includeHtml","Boolean","all","result","blankLine","partial","tokenize","effects","ok","nok","markdownSpace","factorySpace","after","markdownLineEnding","limit","POSITIVE_INFINITY","size","enter","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","splice","items","parameters","chunkStart","from","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","normalizeIdentifier","toUpperCase","resolveAll","events","context","called","resolve","Schema","normal","space","merge","definitions","assign","own","create","definition","properties","info","DefinedInfo","transform","attributes","mustUseProperty","normalize","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","rest","camelcase","dashes","kebab","$0","checks","types","super","mark","check","defined","powers","increment","nameRe","nameReJsx","jsx","empty","hastToReact","StyleToObject","stringifyPosition","point","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","ruleId","fatal","file","stack","actual","expected","note","url","emptyMap","dashSomething","tableElements","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","pointStart","columnNumber","fileName","lineNumber","developmentCreate","jsxs","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","findComponentFromName","alignValue","createProperty","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","isNaN","commas","spaces","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","toDash","$1","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","concat","deleteCount","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","numeric","characterEscape","lineEnding","labelEnd","newEvents","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","pointEnd","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","unreachable","deprecation","mdastTree","colon","questionMark","numberSign","findAfter","convert","convertElement","castFactory","tagNameFactory","tests","anyFactory","testFunction","looksLikeAnElement","searchLineFeeds","searchTabOrSpaces","p","row","notRendered","blockOrCaption","toText","options_","block","inferWhitespace","breakBefore","breakAfter","collectText","renderedTextCollection","collectElement","collectPreText","trimAndCollapseSpacesAndTabs","rehypeHighlight","aliases","detect","languages","common","plainText","subset","lowlight","createLowlight","registerAlias","highlight","highlightAuto","createH","defaultTagName","caseSensitive","createAdjustMap","selector","subvalue","parseSelector","record","isChild","addProperty","addChild","parsePrimitive","finalResult","h","s","cr","lf","webNamespaces","mathml","fromParse5","location","verbose","quirksMode","loc","indices","toOffset","eol","toPoint","namespaceURI","attrs","sourceCodeLocation","startTag","endTag","createLocation","opening","closing","startLine","startCol","endLine","endCol","endOffset","zwitch","invalid","unknown","currentSchema","doctype","publicId","systemId","htmlVoidElements","UNDEFINED_CODE_POINTS","REPLACEMENT_CHARACTER","CODE_POINTS","SEQUENCES","isSurrogate","cp","isControlCodePoint","isUndefinedCodePoint","ERR","Preprocessor","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","lastErrOffset","col","getError","cpOffset","_err","onParseError","_addGap","_processSurrogate","nextCp","isSurrogatePair","EOF","surrogateInInputStream","willDropParsedChunk","dropParsedChunk","isLastChunk","insertHtmlAtCurrentPos","startsWith","peek","CARRIAGE_RETURN","LINE_FEED","advance","_checkForProblematicCharacters","controlCharacterInInputStream","noncharacterInInputStream","retreat","TokenType","getTokenAttr","attrName","Uint16Array","decodeMap","_a","codePoint","replaceCodePoint","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","ZERO","NINE","isEntityInAttributeInvalidEnd","EQUALS","UPPER_A","UPPER_Z","LOWER_A","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","decodeTree","emitCodePoint","errors","EntityStart","treeIndex","excess","decodeMode","Strict","startEntity","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","digitCount","pow","startIdx","UPPER_F","LOWER_F","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","valueLength","VALUE_LENGTH","determineBranch","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","decoder","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","htmlDecodeTree","xmlDecodeTree","NS","ATTRS","DOCUMENT_MODE","TAG_NAMES","TAG_ID","TAG_NAME_TO_ID","A","ADDRESS","ANNOTATION_XML","APPLET","AREA","ARTICLE","ASIDE","B","BASE","BASEFONT","BGSOUND","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CAPTION","CENTER","CODE","COL","COLGROUP","DD","DESC","DETAILS","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FOREIGN_OBJECT","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IMG","IMAGE","INPUT","IFRAME","KEYGEN","LABEL","LI","LINK","LISTING","MAIN","MALIGNMARK","MARQUEE","MATH","MENU","META","MGLYPH","MI","MO","MN","MS","MTEXT","NAV","NOBR","NOFRAMES","NOEMBED","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","P","PARAM","PLAINTEXT","PRE","RB","RP","RT","RTC","RUBY","S","SCRIPT","SEARCH","SECTION","SELECT","SOURCE","SMALL","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","TABLE","TBODY","TEMPLATE","TEXTAREA","TFOOT","TD","TH","THEAD","TITLE","TR","TRACK","TT","U","UL","SVG","VAR","WBR","XMP","getTagID","UNKNOWN","SPECIAL_ELEMENTS","MATHML","XLINK","XML","XMLNS","NUMBERED_HEADERS","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","CDATA_SECTION","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLetter","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLower","DIGIT_0","DIGIT_9","isAsciiDigit","toAsciiLower","isWhitespace","SPACE","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","paused","inLoop","inForeignNode","lastStartTagName","active","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","preprocessor","currentLocation","getCurrentLocation","entityDecoder","_flushCodePointConsumedAsCharacterReference","NULL","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","controlCharacterReference","getErrorForNumericCharacterReference","_b","sourceCodeLocationInfo","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","writeCallback","_advanceBy","_consumeSequenceIfMatch","_createStartTagToken","START_TAG","tagID","selfClosing","ackSelfClosing","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","_emitChars","_startCharacterReference","CHARACTER_REFERENCE","_isCharacterReferenceInAttribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","$$","EQUALS_SIGN","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","SEMICOLON","unknownNamedCharacterReference","IMPLICIT_END_TAG_REQUIRED","IMPLICIT_END_TAG_REQUIRED_THOROUGHLY","SCOPING_ELEMENTS_HTML","SCOPING_ELEMENTS_HTML_LIST","SCOPING_ELEMENTS_HTML_BUTTON","SCOPING_ELEMENTS_MATHML","SCOPING_ELEMENTS_SVG","TABLE_ROW_CONTEXT","TABLE_BODY_CONTEXT","TABLE_CONTEXT","TABLE_CELLS","OpenElementStack","currentTmplContentOrNode","_isInTemplate","treeAdapter","getTemplateContent","tagIDs","stackTop","tmplCount","currentTagId","_indexOf","getNamespaceURI","_updateCurrentElement","onItemPush","popped","onItemPop","oldElement","newElement","idx","insertAfter","referenceElement","newElementID","insertionIdx","popUntilTagNamePopped","targetIdx","shortenToLength","popUntilElementPopped","popUntilPopped","targetNS","_indexOfTagNames","popUntilNumberedHeaderPopped","popUntilTableCellPopped","popAllUpToHtmlElement","clearBackTo","clearBackToTableContext","clearBackToTableBodyContext","clearBackToTableRowContext","tryPeekProperlyNestedBodyElement","contains","getCommonAncestor","elementIdx","isRootHtmlElementCurrent","hasInDynamicScope","htmlScope","tn","hasInScope","hasInListItemScope","hasInButtonScope","hasNumberedHeaderInScope","hasInTableScope","hasTableBodyContextInTableScope","hasInSelectScope","generateImpliedEndTags","generateImpliedEndTagsThoroughly","generateImpliedEndTagsWithExclusion","exclusionId","EntryType","MARKER","Marker","FormattingElementList","bookmark","_getNoahArkConditionCandidates","neAttrs","candidates","neAttrsLength","neTagName","getTagName","neNamespaceURI","elementAttrs","getAttrList","_ensureNoahArkCondition","neAttrsMap","neAttr","validCandidates","candidate","every","cAttr","insertMarker","pushElement","Element","insertElementAfterBookmark","bookmarkIdx","removeEntry","clearToLastMarker","markerIdx","getElementEntryInScopeWithTagName","getElementEntry","defaultTreeAdapter","createDocument","NO_QUIRKS","createDocumentFragment","createCommentNode","createTextNode","appendChild","newNode","insertBefore","referenceNode","setTemplateContent","templateElement","contentElement","setDocumentType","doctypeNode","setDocumentMode","getDocumentMode","detachNode","insertText","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","attr","j","getFirstChild","getChildNodes","getParentNode","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","setNodeSourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","VALID_DOCTYPE_NAME","QUIRKS_MODE_PUBLIC_ID_PREFIXES","QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES","QUIRKS_MODE_PUBLIC_IDS","LIMITED_QUIRKS_PUBLIC_ID_PREFIXES","LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES","hasPrefix","prefixes","MIME_TYPES","SVG_ATTRS_ADJUSTMENT_MAP","XML_ATTRS_ADJUSTMENT_MAP","SVG_TAG_NAMES_ADJUSTMENT_MAP","EXITS_FOREIGN_CONTENT","adjustTokenMathMLAttrs","adjustTokenSVGAttrs","adjustedAttrName","adjustTokenXMLAttrs","adjustedAttrEntry","isIntegrationPoint","ns","foreignNS","ENCODING","isHtmlIntegrationPoint","isMathMLTextIntegrationPoint","InsertionMode","BASE_LOC","TABLE_STRUCTURE_TAGS","defaultParserOptions","scriptingEnabled","fragmentContext","scriptHandler","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","fosterParentingEnabled","activeFormattingElements","fragmentContextID","_setContextModes","openElements","getFragmentParser","opts","TN","documentMock","IN_TEMPLATE","_initTokenizerForFragmentParsing","_insertFakeRootElement","_resetInsertionMode","_findFormInFragmentContext","getFragment","rootElement","_adoptNodes","beforeToken","tid","isTop","_setEndLocation","isHTML","_isIntegrationPoint","_switchToTextParsing","nextTokenizerState","_insertElement","TEXT","switchToPlaintextParsing","IN_BODY","_getAdjustedCurrentElement","_setDocumentType","docTypeNode","_attachElementToTree","_shouldFosterParentOnInsertion","_fosterParentElement","_appendElement","_insertFakeElement","_insertTemplate","tmpl","_appendCommentNode","_insertCharacters","beforeElement","_findFosterParentingLocation","textNodeIdx","donor","closingToken","ctLoc","endLoc","shouldProcessStartTagTokenInForeignContent","_processToken","_processStartTag","foreignContent","_reconstructActiveFormattingElements","listLength","findIndex","_closeTableCell","IN_ROW","_closePElement","IN_TABLE_BODY","IN_CAPTION","IN_COLUMN_GROUP","IN_TABLE","IN_FRAMESET","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","IN_CELL","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","openElement","_isSpecialElement","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","QUIRKS","LIMITED_QUIRKS","nonConformingDoctype","doctypeInInitialMode","misplacedDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","startTagToken","COLOR","SIZE","FACE","popUntilHtmlOrIntegrationPoint","_startTagOutsideForeignContent","currentNs","adjustedTagName","startTagInForeignContent","startTagBeforeHtml","startTagInBody","startTagBeforeHead","startTagInHead","nestedNoscriptInHead","startTagInHeadNoScript","abandonedHeadElementChild","misplacedStartTagForHeadElement","startTagAfterHead","startTagInTable","TABLE_VOID_ELEMENTS","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","startTagInCell","startTagInSelect","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","_endTagOutsideForeignContent","endTagInForeignContent","endTagBeforeHtml","endTagWithoutMatchingOpenElement","endTagBeforeHead","templateEndTagInHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInElementThatCanContainOnlyText","eofInText","eofInTemplate","stopParsing","whitespaceCharacterInBody","whitespaceCharacterInTableText","aaObtainFormattingElementEntry","formattingElementEntry","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","aaInnerLoop","formattingElement","lastElement","nextElement","elementEntry","counterOverflow","aaRecreateElementFromEntry","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","callAdoptionAgency","htmlElement","htmlLocation","bodyElement","bodyLocation","missingDoctype","closingOfElementWithOpenChildElements","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","modeInBody","areaStartTagInBody","isHiddenInput","inputType","rawTextStartTagInBody","genericStartTagInBody","bStartTagInBody","activeElementEntry","aStartTagInBody","numberedHeaderStartTagInBody","addressStartTagInBody","elementId","listItemStartTagInBody","hrStartTagInBody","rbStartTagInBody","rtStartTagInBody","preStartTagInBody","xmpStartTagInBody","svgStartTagInBody","htmlStartTagInBody","bodyStartTagInBody","inTemplate","formStartTagInBody","nobrStartTagInBody","mathStartTagInBody","tableStartTagInBody","inputStartTagInBody","paramStartTagInBody","imageStartTagInBody","buttonStartTagInBody","appletStartTagInBody","iframeStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","framesetStartTagInBody","textareaStartTagInBody","plaintextStartTagInBody","pEndTagInBody","addressEndTagInBody","liEndTagInBody","ddEndTagInBody","numberedHeaderEndTagInBody","brEndTagInBody","bodyEndTagInBody","htmlEndTagInBody","formEndTagInBody","appletEndTagInBody","tokenInTable","tdStartTagInTable","colStartTagInTable","formStartTagInTable","tableStartTagInTable","tbodyStartTagInTable","inputStartTagInTable","captionStartTagInTable","colgroupStartTagInTable","savedFosterParentingState","xmlCodeMap","getEscaper","lastIdx","gfmTagfilterExpression","knownMdxNames","parseOptions","documentMode","handleRaw","stitches","resetTokenizer","stitch","toParse5","tag","Token","createParse5Location","cloneWithoutChildren","fakeRoot","setPoint","tagfilter","node_","extra","charRefCode","rehypeRaw","ccount","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","phrasing","checkStrong","checkFence","fences","formatCodeAsIndented","longestStreak","encode","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","looksLikeANode","CONTINUE","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}